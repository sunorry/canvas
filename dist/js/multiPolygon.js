(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["multiPolygon"],{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/ts-loader/index.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-2!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n/* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _lib_Canvas2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/Canvas2D */ \"./src/views/math/multiPolygon/lib/Canvas2D.ts\");\n/* harmony import */ var _lib_CanvasGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/CanvasGL */ \"./src/views/math/multiPolygon/lib/CanvasGL.ts\");\n/* harmony import */ var _makePolygonData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./makePolygonData */ \"./src/views/math/multiPolygon/makePolygonData.ts\");\n\n// https://g.gltjk.com/learn-visualization/canvas-webgl-polygon/\n\n\n\n\n\nfunction useDraw2DGLInstance(canvas2D, canvasGL) {\n  var instance = {};\n  Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"onMounted\"])(function () {\n    instance.canvas2DTools = new _lib_Canvas2D__WEBPACK_IMPORTED_MODULE_2__[\"default\"](canvas2D.value, {\n      drawCross: true\n    });\n    instance.canvasGLTools = new _lib_CanvasGL__WEBPACK_IMPORTED_MODULE_3__[\"default\"](canvasGL.value);\n  });\n  return instance;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"defineComponent\"])({\n  name: 'multiPolygon',\n  setup: function setup() {\n    var canvas2D = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"ref\"])();\n    var canvasGL = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"ref\"])();\n    var drawInstance = useDraw2DGLInstance(canvas2D, canvasGL);\n\n    function drawPentagon() {\n      var polygonData = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makePolygonData\"])([0, 100]);\n      drawInstance.canvas2DTools.drawPolygon(polygonData);\n      drawInstance.canvasGLTools.polygon(polygonData.map(function (el) {\n        return [el.x, el.y];\n      }));\n    }\n\n    function drawStar() {\n      var polygonData = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makePolygonData\"])([0, 100]);\n      drawInstance.canvas2DTools.drawPolygon([0, 2, 4, 1, 3].map(function (i) {\n        return polygonData[i];\n      }));\n      drawInstance.canvasGLTools.polygon([0, 2, 4, 1, 3].map(function (i) {\n        return polygonData[i];\n      }).map(function (el) {\n        return [el.x, el.y];\n      }));\n    }\n\n    function drawEvenoddStar() {\n      var polygonData = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makePolygonData\"])([0, 100]);\n      drawInstance.canvas2DTools.drawPolygon([0, 2, 4, 1, 3].map(function (i) {\n        return polygonData[i];\n      }), {\n        rule: 'evenodd'\n      });\n      drawInstance.canvasGLTools.polygon([0, 2, 4, 1, 3].map(function (i) {\n        return polygonData[i];\n      }).map(function (el) {\n        return [el.x, el.y];\n      }), {\n        rule: 'evenodd'\n      });\n    }\n\n    function drawCircle() {\n      var polygonData = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makePolygonData\"])([0, 100], 40);\n      drawInstance.canvas2DTools.drawPolygon(polygonData);\n      drawInstance.canvasGLTools.polygon(polygonData.map(function (el) {\n        return [el.x, el.y];\n      }));\n    }\n\n    function draw8Polygon() {\n      var polygonData = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makePolygonData\"])([0, 100], 8).map(function (item, index) {\n        if (index % 2 !== 0) {\n          item = item.scale(0.5);\n        }\n\n        return item;\n      });\n      drawInstance.canvas2DTools.drawPolygon(polygonData);\n      drawInstance.canvasGLTools.polygon(polygonData.map(function (el) {\n        return [el.x, el.y];\n      }));\n    }\n\n    function drawEllipse() {\n      var data = Object(_makePolygonData__WEBPACK_IMPORTED_MODULE_4__[\"makeEllipseData\"])(0, 0, 100, 50);\n      drawInstance.canvas2DTools.drawPolygon(data);\n      drawInstance.canvasGLTools.polygon(data.map(function (el) {\n        return [el.x, el.y];\n      }));\n    }\n\n    return {\n      canvas2D: canvas2D,\n      canvasGL: canvasGL,\n      drawPentagon: drawPentagon,\n      drawStar: drawStar,\n      drawEvenoddStar: drawEvenoddStar,\n      drawCircle: drawCircle,\n      draw8Polygon: draw8Polygon,\n      drawEllipse: drawEllipse\n    };\n  }\n}));\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-2!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1");

/***/ }),

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader-v16/dist/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={}":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={} ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nvar _withId = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"withScopeId\"])(\"data-v-db3e987c\");\n\nObject(vue__WEBPACK_IMPORTED_MODULE_0__[\"pushScopeId\"])(\"data-v-db3e987c\");\n\nvar _hoisted_1 = {\n  width: \"512\",\n  height: \"512\",\n  ref: \"canvas2D\"\n};\nvar _hoisted_2 = {\n  width: \"512\",\n  height: \"512\",\n  ref: \"canvasGL\"\n};\n\nObject(vue__WEBPACK_IMPORTED_MODULE_0__[\"popScopeId\"])();\n\nvar render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createBlock\"])(\"div\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.drawPentagon.apply(_ctx, arguments);\n    })\n  }, \"五边形\"), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[2] || (_cache[2] = function () {\n      return _ctx.drawStar.apply(_ctx, arguments);\n    })\n  }, \"五角星\"), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return _ctx.drawEvenoddStar.apply(_ctx, arguments);\n    })\n  }, \"evenodd五角星\"), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.drawCircle.apply(_ctx, arguments);\n    })\n  }, \"圆\"), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[5] || (_cache[5] = function () {\n      return _ctx.draw8Polygon.apply(_ctx, arguments);\n    })\n  }, \"菱形\"), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"button\", {\n    class: \"btn\",\n    onClick: _cache[6] || (_cache[6] = function () {\n      return _ctx.drawEllipse.apply(_ctx, arguments);\n    })\n  }, \"椭圆\")]), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"div\", null, [Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"canvas\", _hoisted_1, null, 512\n  /* NEED_PATCH */\n  ), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createVNode\"])(\"canvas\", _hoisted_2, null, 512\n  /* NEED_PATCH */\n  )])]);\n});\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1");

/***/ }),

/***/ "./node_modules/core-js/internals/array-for-each.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $forEach = __webpack_require__(/*! ../internals/array-iteration */ \"./node_modules/core-js/internals/array-iteration.js\").forEach;\nvar arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ \"./node_modules/core-js/internals/array-method-is-strict.js\");\nvar arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ \"./node_modules/core-js/internals/array-method-uses-to-length.js\");\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/array-for-each.js?");

/***/ }),

/***/ "./node_modules/core-js/internals/flatten-into-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/flatten-into-array.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isArray = __webpack_require__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\nvar toLength = __webpack_require__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\nvar bind = __webpack_require__(/*! ../internals/function-bind-context */ \"./node_modules/core-js/internals/function-bind-context.js\");\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/flatten-into-array.js?");

/***/ }),

/***/ "./node_modules/core-js/internals/string-repeat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/string-repeat.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar toInteger = __webpack_require__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\nvar requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/string-repeat.js?");

/***/ }),

/***/ "./node_modules/core-js/internals/string-trim.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\nvar whitespaces = __webpack_require__(/*! ../internals/whitespaces */ \"./node_modules/core-js/internals/whitespaces.js\");\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/string-trim.js?");

/***/ }),

/***/ "./node_modules/core-js/internals/this-number-value.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/this-number-value.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var classof = __webpack_require__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\n\n// `thisNumberValue` abstract operation\n// https://tc39.github.io/ecma262/#sec-thisnumbervalue\nmodule.exports = function (value) {\n  if (typeof value != 'number' && classof(value) != 'Number') {\n    throw TypeError('Incorrect invocation');\n  }\n  return +value;\n};\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/this-number-value.js?");

/***/ }),

/***/ "./node_modules/core-js/internals/whitespaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n//# sourceURL=webpack:///./node_modules/core-js/internals/whitespaces.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.array.flat.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.flat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\nvar flattenIntoArray = __webpack_require__(/*! ../internals/flatten-into-array */ \"./node_modules/core-js/internals/flatten-into-array.js\");\nvar toObject = __webpack_require__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\nvar toLength = __webpack_require__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\nvar toInteger = __webpack_require__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\nvar arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ \"./node_modules/core-js/internals/array-species-create.js\");\n\n// `Array.prototype.flat` method\n// https://github.com/tc39/proposal-flatMap\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.array.flat.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.array.for-each.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\nvar forEach = __webpack_require__(/*! ../internals/array-for-each */ \"./node_modules/core-js/internals/array-for-each.js\");\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.array.for-each.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.array.map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\nvar $map = __webpack_require__(/*! ../internals/array-iteration */ \"./node_modules/core-js/internals/array-iteration.js\").map;\nvar arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ \"./node_modules/core-js/internals/array-method-has-species-support.js\");\nvar arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ \"./node_modules/core-js/internals/array-method-uses-to-length.js\");\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.array.map.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.array.unscopables.flat.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.unscopables.flat.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ \"./node_modules/core-js/internals/add-to-unscopables.js\");\n\naddToUnscopables('flat');\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.array.unscopables.flat.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.math.hypot.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.math.hypot.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.github.io/ecma262/#sec-math.hypot\n$({ target: 'Math', stat: true, forced: BUGGY }, {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.math.hypot.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.number.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\nvar global = __webpack_require__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\nvar isForced = __webpack_require__(/*! ../internals/is-forced */ \"./node_modules/core-js/internals/is-forced.js\");\nvar redefine = __webpack_require__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\nvar has = __webpack_require__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\nvar classof = __webpack_require__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\nvar inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ \"./node_modules/core-js/internals/inherit-if-required.js\");\nvar toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ \"./node_modules/core-js/internals/to-primitive.js\");\nvar fails = __webpack_require__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\nvar create = __webpack_require__(/*! ../internals/object-create */ \"./node_modules/core-js/internals/object-create.js\");\nvar getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ \"./node_modules/core-js/internals/object-get-own-property-names.js\").f;\nvar getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\").f;\nvar defineProperty = __webpack_require__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\nvar trim = __webpack_require__(/*! ../internals/string-trim */ \"./node_modules/core-js/internals/string-trim.js\").trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.number.constructor.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/es.number.to-fixed.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.to-fixed.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\nvar toInteger = __webpack_require__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\nvar thisNumberValue = __webpack_require__(/*! ../internals/this-number-value */ \"./node_modules/core-js/internals/this-number-value.js\");\nvar repeat = __webpack_require__(/*! ../internals/string-repeat */ \"./node_modules/core-js/internals/string-repeat.js\");\nvar fails = __webpack_require__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n\nvar nativeToFixed = 1.0.toFixed;\nvar floor = Math.floor;\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar FORCED = nativeToFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !fails(function () {\n  // V8 ~ Android 4.3-\n  nativeToFixed.call({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  // eslint-disable-next-line max-statements\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toInteger(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    var multiply = function (n, c) {\n      var index = -1;\n      var c2 = c;\n      while (++index < 6) {\n        c2 += n * data[index];\n        data[index] = c2 % 1e7;\n        c2 = floor(c2 / 1e7);\n      }\n    };\n\n    var divide = function (n) {\n      var index = 6;\n      var c = 0;\n      while (--index >= 0) {\n        c += data[index];\n        data[index] = floor(c / n);\n        c = (c % n) * 1e7;\n      }\n    };\n\n    var dataToString = function () {\n      var index = 6;\n      var s = '';\n      while (--index >= 0) {\n        if (s !== '' || index === 0 || data[index] !== 0) {\n          var t = String(data[index]);\n          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;\n        }\n      } return s;\n    };\n\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        result = dataToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        result = dataToString() + repeat.call('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat.call('0', fractDigits - k) + result\n        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/es.number.to-fixed.js?");

/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var global = __webpack_require__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\nvar DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ \"./node_modules/core-js/internals/dom-iterables.js\");\nvar forEach = __webpack_require__(/*! ../internals/array-for-each */ \"./node_modules/core-js/internals/array-for-each.js\");\nvar createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);\n  } catch (error) {\n    CollectionPrototype.forEach = forEach;\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/core-js/modules/web.dom-collections.for-each.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"canvas[data-v-db3e987c] {\\n  margin-right: 4px;\\n  border: 1px solid #ccc;\\n}\\n.btn[data-v-db3e987c] {\\n  margin: 10px;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1");

/***/ }),

/***/ "./node_modules/tess2/index.js":
/*!*************************************!*\
  !*** ./node_modules/tess2/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/tess2 */ \"./node_modules/tess2/src/tess2.js\");\n\n//# sourceURL=webpack:///./node_modules/tess2/index.js?");

/***/ }),

/***/ "./node_modules/tess2/src/tess2.js":
/*!*****************************************!*\
  !*** ./node_modules/tess2/src/tess2.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) \n** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\n** All Rights Reserved.\n**\n** Permission is hereby granted, free of charge, to any person obtaining a copy\n** of this software and associated documentation files (the \"Software\"), to deal\n** in the Software without restriction, including without limitation the rights\n** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n** of the Software, and to permit persons to whom the Software is furnished to do so,\n** subject to the following conditions:\n** \n** The above copyright notice including the dates of first publication and either this\n** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\n** included in all copies or substantial portions of the Software. \n**\n** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\n** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n** OR OTHER DEALINGS IN THE SOFTWARE.\n** \n** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\n** be used in advertising or otherwise to promote the sale, use or other dealings in\n** this Software without prior written authorization from Silicon Graphics, Inc.\n*/\n/*\n** Author: Mikko Mononen, Aug 2013.\n** The code is based on GLU libtess by Eric Veach, July 1994\n*/\n\n\t\n\n\t/* Public API */\n\n\tvar Tess2 = {};\n\n\tmodule.exports = Tess2;\n\t\n\tTess2.WINDING_ODD = 0;\n\tTess2.WINDING_NONZERO = 1;\n\tTess2.WINDING_POSITIVE = 2;\n\tTess2.WINDING_NEGATIVE = 3;\n\tTess2.WINDING_ABS_GEQ_TWO = 4;\n\n\tTess2.POLYGONS = 0;\n\tTess2.CONNECTED_POLYGONS = 1;\n\tTess2.BOUNDARY_CONTOURS = 2;\n\n\tTess2.tesselate = function(opts) {\n\t\tvar debug =  opts.debug || false;\n\t\tvar tess = new Tesselator();\n\t\tfor (var i = 0; i < opts.contours.length; i++) {\n\t\t\ttess.addContour(opts.vertexSize || 2, opts.contours[i]);\n\t\t}\n\t\ttess.tesselate(opts.windingRule || Tess2.WINDING_ODD,\n\t\t\t\t\t   opts.elementType || Tess2.POLYGONS,\n\t\t\t\t\t   opts.polySize || 3,\n\t\t\t\t\t   opts.vertexSize || 2,\n\t\t\t\t\t   opts.normal || [0,0,1]);\n\t\treturn {\n\t\t\tvertices: tess.vertices,\n\t\t\tvertexIndices: tess.vertexIndices,\n\t\t\tvertexCount: tess.vertexCount,\n\t\t\telements: tess.elements,\n\t\t\telementCount: tess.elementCount,\n\t\t\tmesh: debug ? tess.mesh : undefined\n\t\t};\n\t};\n\n\t/* Internal */\n\n\tvar assert = function(cond) {\n\t\tif (!cond) {\n\t\t\tthrow \"Assertion Failed!\";\n\t\t}\n\t}\n\n\t/* The mesh structure is similar in spirit, notation, and operations\n\t* to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\n\t* for the manipulation of general subdivisions and the computation of\n\t* Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\n\t* For a simplified description, see the course notes for CS348a,\n\t* \"Mathematical Foundations of Computer Graphics\", available at the\n\t* Stanford bookstore (and taught during the fall quarter).\n\t* The implementation also borrows a tiny subset of the graph-based approach\n\t* use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\n\t* to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\n\t*\n\t* The fundamental data structure is the \"half-edge\".  Two half-edges\n\t* go together to make an edge, but they point in opposite directions.\n\t* Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\n\t* its origin vertex (Org), the face on its left side (Lface), and the\n\t* adjacent half-edges in the CCW direction around the origin vertex\n\t* (Onext) and around the left face (Lnext).  There is also a \"next\"\n\t* pointer for the global edge list (see below).\n\t*\n\t* The notation used for mesh navigation:\n\t*  Sym   = the mate of a half-edge (same edge, but opposite direction)\n\t*  Onext = edge CCW around origin vertex (keep same origin)\n\t*  Dnext = edge CCW around destination vertex (keep same dest)\n\t*  Lnext = edge CCW around left face (dest becomes new origin)\n\t*  Rnext = edge CCW around right face (origin becomes new dest)\n\t*\n\t* \"prev\" means to substitute CW for CCW in the definitions above.\n\t*\n\t* The mesh keeps global lists of all vertices, faces, and edges,\n\t* stored as doubly-linked circular lists with a dummy header node.\n\t* The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\n\t*\n\t* The circular edge list is special; since half-edges always occur\n\t* in pairs (e and e->Sym), each half-edge stores a pointer in only\n\t* one direction.  Starting at eHead and following the e->next pointers\n\t* will visit each *edge* once (ie. e or e->Sym, but not both).\n\t* e->Sym stores a pointer in the opposite direction, thus it is\n\t* always true that e->Sym->next->Sym->next == e.\n\t*\n\t* Each vertex has a pointer to next and previous vertices in the\n\t* circular list, and a pointer to a half-edge with this vertex as\n\t* the origin (NULL if this is the dummy header).  There is also a\n\t* field \"data\" for client data.\n\t*\n\t* Each face has a pointer to the next and previous faces in the\n\t* circular list, and a pointer to a half-edge with this face as\n\t* the left face (NULL if this is the dummy header).  There is also\n\t* a field \"data\" for client data.\n\t*\n\t* Note that what we call a \"face\" is really a loop; faces may consist\n\t* of more than one loop (ie. not simply connected), but there is no\n\t* record of this in the data structure.  The mesh may consist of\n\t* several disconnected regions, so it may not be possible to visit\n\t* the entire mesh by starting at a half-edge and traversing the edge\n\t* structure.\n\t*\n\t* The mesh does NOT support isolated vertices; a vertex is deleted along\n\t* with its last edge.  Similarly when two faces are merged, one of the\n\t* faces is deleted (see tessMeshDelete below).  For mesh operations,\n\t* all face (loop) and vertex pointers must not be NULL.  However, once\n\t* mesh manipulation is finished, TESSmeshZapFace can be used to delete\n\t* faces of the mesh, one at a time.  All external faces can be \"zapped\"\n\t* before the mesh is returned to the client; then a NULL face indicates\n\t* a region which is not part of the output polygon.\n\t*/\n\n\tfunction TESSvertex() {\n\t\tthis.next = null;\t/* next vertex (never NULL) */\n\t\tthis.prev = null;\t/* previous vertex (never NULL) */\n\t\tthis.anEdge = null;\t/* a half-edge with this origin */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.coords = [0,0,0];\t/* vertex location in 3D */\n\t\tthis.s = 0.0;\n\t\tthis.t = 0.0;\t\t\t/* projection onto the sweep plane */\n\t\tthis.pqHandle = 0;\t\t/* to allow deletion from priority queue */\n\t\tthis.n = 0;\t\t\t\t/* to allow identify unique vertices */\n\t\tthis.idx = 0;\t\t\t/* to allow map result to original verts */\n\t} \n\n\tfunction TESSface() {\n\t\tthis.next = null;\t\t/* next face (never NULL) */\n\t\tthis.prev = null;\t\t/* previous face (never NULL) */\n\t\tthis.anEdge = null;\t\t/* a half edge with this left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.trail = null;\t\t/* \"stack\" for conversion to strips */\n\t\tthis.n = 0;\t\t\t\t/* to allow identiy unique faces */\n\t\tthis.marked = false;\t/* flag for conversion to strips */\n\t\tthis.inside = false;\t/* this face is in the polygon interior */\n\t};\n\n\tfunction TESShalfEdge(side) {\n\t\tthis.next = null;\t\t/* doubly-linked list (prev==Sym->next) */\n\t\tthis.Sym = null;\t\t/* same edge, opposite direction */\n\t\tthis.Onext = null;\t\t/* next edge CCW around origin */\n\t\tthis.Lnext = null;\t\t/* next edge CCW around left face */\n\t\tthis.Org = null;\t\t/* origin vertex (Overtex too long) */\n\t\tthis.Lface = null;\t\t/* left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.activeRegion = null;\t/* a region with this upper edge (sweep.c) */\n\t\tthis.winding = 0;\t\t\t/* change in winding number when crossing\n\t\t\t\t\t\t\t\t\t   from the right face to the left face */\n\t\tthis.side = side;\n\t};\n\n\tTESShalfEdge.prototype = {\n\t\tget Rface() { return this.Sym.Lface; },\n\t\tset Rface(v) { this.Sym.Lface = v; },\n\t\tget Dst() { return this.Sym.Org; },\n\t\tset Dst(v) { this.Sym.Org = v; },\n\t\tget Oprev() { return this.Sym.Lnext; },\n\t\tset Oprev(v) { this.Sym.Lnext = v; },\n\t\tget Lprev() { return this.Onext.Sym; },\n\t\tset Lprev(v) { this.Onext.Sym = v; },\n\t\tget Dprev() { return this.Lnext.Sym; },\n\t\tset Dprev(v) { this.Lnext.Sym = v; },\n\t\tget Rprev() { return this.Sym.Onext; },\n\t\tset Rprev(v) { this.Sym.Onext = v; },\n\t\tget Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */\n\t\tset Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */\n\t\tget Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */\n\t\tset Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */\n\t};\n\n\n\n\tfunction TESSmesh() {\n\t\tvar v = new TESSvertex();\n\t\tvar f = new TESSface();\n\t\tvar e = new TESShalfEdge(0);\n\t\tvar eSym = new TESShalfEdge(1);\n\n\t\tv.next = v.prev = v;\n\t\tv.anEdge = null;\n\n\t\tf.next = f.prev = f;\n\t\tf.anEdge = null;\n\t\tf.trail = null;\n\t\tf.marked = false;\n\t\tf.inside = false;\n\n\t\te.next = e;\n\t\te.Sym = eSym;\n\t\te.Onext = null;\n\t\te.Lnext = null;\n\t\te.Org = null;\n\t\te.Lface = null;\n\t\te.winding = 0;\n\t\te.activeRegion = null;\n\n\t\teSym.next = eSym;\n\t\teSym.Sym = e;\n\t\teSym.Onext = null;\n\t\teSym.Lnext = null;\n\t\teSym.Org = null;\n\t\teSym.Lface = null;\n\t\teSym.winding = 0;\n\t\teSym.activeRegion = null;\n\n\t\tthis.vHead = v;\t\t/* dummy header for vertex list */\n\t\tthis.fHead = f;\t\t/* dummy header for face list */\n\t\tthis.eHead = e;\t\t/* dummy header for edge list */\n\t\tthis.eHeadSym = eSym;\t/* and its symmetric counterpart */\n\t};\n\n\t/* The mesh operations below have three motivations: completeness,\n\t* convenience, and efficiency.  The basic mesh operations are MakeEdge,\n\t* Splice, and Delete.  All the other edge operations can be implemented\n\t* in terms of these.  The other operations are provided for convenience\n\t* and/or efficiency.\n\t*\n\t* When a face is split or a vertex is added, they are inserted into the\n\t* global list *before* the existing vertex or face (ie. e->Org or e->Lface).\n\t* This makes it easier to process all vertices or faces in the global lists\n\t* without worrying about processing the same data twice.  As a convenience,\n\t* when a face is split, the \"inside\" flag is copied from the old face.\n\t* Other internal data (v->data, v->activeRegion, f->data, f->marked,\n\t* f->trail, e->winding) is set to zero.\n\t*\n\t* ********************** Basic Edge Operations **************************\n\t*\n\t* tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\n\t* The loop (face) consists of the two new half-edges.\n\t*\n\t* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t* mesh connectivity and topology.  It changes the mesh so that\n\t*  eOrg->Onext <- OLD( eDst->Onext )\n\t*  eDst->Onext <- OLD( eOrg->Onext )\n\t* where OLD(...) means the value before the meshSplice operation.\n\t*\n\t* This can have two effects on the vertex structure:\n\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t*\n\t* Similarly (and independently) for the face structure,\n\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t*\n\t* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t* would create isolated vertices, those are deleted as well.\n\t*\n\t* ********************** Other Edge Operations **************************\n\t*\n\t* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t*\n\t* ************************ Other Operations *****************************\n\t*\n\t* tessMeshNewMesh() creates a new mesh with no edges, no vertices,\n\t* and no loops (what we usually call a \"face\").\n\t*\n\t* tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n\t* both meshes, and returns the new mesh (the old meshes are destroyed).\n\t*\n\t* tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n\t*\n\t* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t* left face.  Any edges which also have a NULL pointer as their right face\n\t* are deleted entirely (along with any isolated vertices this produces).\n\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t*\n\t* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t*/\n\n\tTESSmesh.prototype = {\n\n\t\t/* MakeEdge creates a new pair of half-edges which form their own loop.\n\t\t* No vertex or face structures are allocated, but these must be assigned\n\t\t* before the current edge operation is completed.\n\t\t*/\n\t\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\n\t\tmakeEdge_: function(eNext) {\n\t\t\tvar e = new TESShalfEdge(0);\n\t\t\tvar eSym = new TESShalfEdge(1);\n\n\t\t\t/* Make sure eNext points to the first edge of the edge pair */\n\t\t\tif( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }\n\n\t\t\t/* Insert in circular doubly-linked list before eNext.\n\t\t\t* Note that the prev pointer is stored in Sym->next.\n\t\t\t*/\n\t\t\tvar ePrev = eNext.Sym.next;\n\t\t\teSym.next = ePrev;\n\t\t\tePrev.Sym.next = e;\n\t\t\te.next = eNext;\n\t\t\teNext.Sym.next = eSym;\n\n\t\t\te.Sym = eSym;\n\t\t\te.Onext = e;\n\t\t\te.Lnext = eSym;\n\t\t\te.Org = null;\n\t\t\te.Lface = null;\n\t\t\te.winding = 0;\n\t\t\te.activeRegion = null;\n\n\t\t\teSym.Sym = e;\n\t\t\teSym.Onext = eSym;\n\t\t\teSym.Lnext = e;\n\t\t\teSym.Org = null;\n\t\t\teSym.Lface = null;\n\t\t\teSym.winding = 0;\n\t\t\teSym.activeRegion = null;\n\n\t\t\treturn e;\n\t\t},\n\n\t\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n\t\t* CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n\t\t* a->Onext and b->Onext are exchanged.  This can have various effects\n\t\t* depending on whether a and b belong to different face or vertex rings.\n\t\t* For more explanation see tessMeshSplice() below.\n\t\t*/\n\t\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\n\t\tsplice_: function(a, b) {\n\t\t\tvar aOnext = a.Onext;\n\t\t\tvar bOnext = b.Onext;\n\t\t\taOnext.Sym.Lnext = b;\n\t\t\tbOnext.Sym.Lnext = a;\n\t\t\ta.Onext = bOnext;\n\t\t\tb.Onext = aOnext;\n\t\t},\n\n\t\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n\t\t* origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n\t\t* a place to insert the new vertex in the global vertex list.  We insert\n\t\t* the new vertex *before* vNext so that algorithms which walk the vertex\n\t\t* list will not see the newly created vertices.\n\t\t*/\n\t\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\n\t\tmakeVertex_: function(newVertex, eOrig, vNext) {\n\t\t\tvar vNew = newVertex;\n\t\t\tassert(vNew !== null);\n\n\t\t\t/* insert in circular doubly-linked list before vNext */\n\t\t\tvar vPrev = vNext.prev;\n\t\t\tvNew.prev = vPrev;\n\t\t\tvPrev.next = vNew;\n\t\t\tvNew.next = vNext;\n\t\t\tvNext.prev = vNew;\n\n\t\t\tvNew.anEdge = eOrig;\n\t\t\t/* leave coords, s, t undefined */\n\n\t\t\t/* fix other edges on this vertex loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Org = vNew;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n\t\t* face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n\t\t* a place to insert the new face in the global face list.  We insert\n\t\t* the new face *before* fNext so that algorithms which walk the face\n\t\t* list will not see the newly created faces.\n\t\t*/\n\t\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\n\t\tmakeFace_: function(newFace, eOrig, fNext) {\n\t\t\tvar fNew = newFace;\n\t\t\tassert(fNew !== null); \n\n\t\t\t/* insert in circular doubly-linked list before fNext */\n\t\t\tvar fPrev = fNext.prev;\n\t\t\tfNew.prev = fPrev;\n\t\t\tfPrev.next = fNew;\n\t\t\tfNew.next = fNext;\n\t\t\tfNext.prev = fNew;\n\n\t\t\tfNew.anEdge = eOrig;\n\t\t\tfNew.trail = null;\n\t\t\tfNew.marked = false;\n\n\t\t\t/* The new face is marked \"inside\" if the old one was.  This is a\n\t\t\t* convenience for the common case where a face has been split in two.\n\t\t\t*/\n\t\t\tfNew.inside = fNext.inside;\n\n\t\t\t/* fix other edges on this face loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Lface = fNew;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n\t\t* and removes from the global edge list.\n\t\t*/\n\t\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tkillEdge_: function(eDel) {\n\t\t\t/* Half-edges are allocated in pairs, see EdgePair above */\n\t\t\tif( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar eNext = eDel.next;\n\t\t\tvar ePrev = eDel.Sym.next;\n\t\t\teNext.Sym.next = ePrev;\n\t\t\tePrev.Sym.next = eNext;\n\t\t},\n\n\n\t\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\n\t\t* vertex list.  It updates the vertex loop to point to a given new vertex.\n\t\t*/\n\t\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\n\t\tkillVertex_: function(vDel, newOrg) {\n\t\t\tvar eStart = vDel.anEdge;\n\t\t\t/* change the origin of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Org = newOrg;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar vPrev = vDel.prev;\n\t\t\tvar vNext = vDel.next;\n\t\t\tvNext.prev = vPrev;\n\t\t\tvPrev.next = vNext;\n\t\t},\n\n\t\t/* KillFace( fDel ) destroys a face and removes it from the global face\n\t\t* list.  It updates the face loop to point to a given new face.\n\t\t*/\n\t\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\n\t\tkillFace_: function(fDel, newLface) {\n\t\t\tvar eStart = fDel.anEdge;\n\n\t\t\t/* change the left face of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Lface = newLface;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar fPrev = fDel.prev;\n\t\t\tvar fNext = fDel.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\t/****************** Basic Edge Operations **********************/\n\n\t\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\n\t\t* The loop consists of the two new half-edges.\n\t\t*/\n\t\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\n\t\tmakeEdge: function() {\n\t\t\tvar newVertex1 = new TESSvertex();\n\t\t\tvar newVertex2 = new TESSvertex();\n\t\t\tvar newFace = new TESSface();\n\t\t\tvar e = this.makeEdge_( this.eHead);\n\t\t\tthis.makeVertex_( newVertex1, e, this.vHead );\n\t\t\tthis.makeVertex_( newVertex2, e.Sym, this.vHead );\n\t\t\tthis.makeFace_( newFace, e, this.fHead );\n\t\t\treturn e;\n\t\t},\n\n\t\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t\t* mesh connectivity and topology.  It changes the mesh so that\n\t\t*\teOrg->Onext <- OLD( eDst->Onext )\n\t\t*\teDst->Onext <- OLD( eOrg->Onext )\n\t\t* where OLD(...) means the value before the meshSplice operation.\n\t\t*\n\t\t* This can have two effects on the vertex structure:\n\t\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t\t*\n\t\t* Similarly (and independently) for the face structure,\n\t\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t\t*\n\t\t* Some special cases:\n\t\t* If eDst == eOrg, the operation has no effect.\n\t\t* If eDst == eOrg->Lnext, the new face will have a single edge.\n\t\t* If eDst == eOrg->Lprev, the old face will have a single edge.\n\t\t* If eDst == eOrg->Onext, the new vertex will have a single edge.\n\t\t* If eDst == eOrg->Oprev, the old vertex will have a single edge.\n\t\t*/\n\t\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\n\t\tsplice: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;\n\t\t\tvar joiningVertices = false;\n\n\t\t\tif( eOrg === eDst ) return;\n\n\t\t\tif( eDst.Org !== eOrg.Org ) {\n\t\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\n\t\t\t\tjoiningVertices = true;\n\t\t\t\tthis.killVertex_( eDst.Org, eOrg.Org );\n\t\t\t}\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Change the edge structure */\n\t\t\tthis.splice_( eDst, eOrg );\n\n\t\t\tif( ! joiningVertices ) {\n\t\t\t\tvar newVertex = new TESSvertex();\n\n\t\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\n\t\t\t\t* Make sure the old vertex points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeVertex_( newVertex, eDst, eOrg.Org );\n\t\t\t\teOrg.Org.anEdge = eOrg;\n\t\t\t}\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();  \n\n\t\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\n\t\t\t\t* Make sure the old face points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeFace_( newFace, eDst, eOrg.Lface );\n\t\t\t\teOrg.Lface.anEdge = eOrg;\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t\t* would create isolated vertices, those are deleted as well.\n\t\t*\n\t\t* This function could be implemented as two calls to tessMeshSplice\n\t\t* plus a few calls to memFree, but this would allocate and delete\n\t\t* unnecessary vertices and faces.\n\t\t*/\n\t\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tdelete: function(eDel) {\n\t\t\tvar eDelSym = eDel.Sym;\n\t\t\tvar joiningLoops = false;\n\n\t\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\n\t\t\t* changes to get a consistent mesh in this \"intermediate\" state.\n\t\t\t*/\n\t\t\tif( eDel.Lface !== eDel.Rface ) {\n\t\t\t\t/* We are joining two loops into one -- remove the left face */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDel.Lface, eDel.Rface );\n\t\t\t}\n\n\t\t\tif( eDel.Onext === eDel ) {\n\t\t\t\tthis.killVertex_( eDel.Org, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\n\t\t\t\teDel.Rface.anEdge = eDel.Oprev;\n\t\t\t\teDel.Org.anEdge = eDel.Onext;\n\n\t\t\t\tthis.splice_( eDel, eDel.Oprev );\n\t\t\t\tif( ! joiningLoops ) {\n\t\t\t\t\tvar newFace = new TESSface();\n\n\t\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\n\t\t\t\t\tthis.makeFace_( newFace, eDel, eDel.Lface );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\n\t\t\t* may have been deleted.  Now we disconnect eDel->Dst.\n\t\t\t*/\n\t\t\tif( eDelSym.Onext === eDelSym ) {\n\t\t\t\tthis.killVertex_( eDelSym.Org, null );\n\t\t\t\tthis.killFace_( eDelSym.Lface, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\n\t\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\n\t\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\n\t\t\t\tthis.splice_( eDelSym, eDelSym.Oprev );\n\t\t\t}\n\n\t\t\t/* Any isolated vertices or faces have already been freed. */\n\t\t\tthis.killEdge_( eDel );\n\t\t},\n\n\t\t/******************** Other Edge Operations **********************/\n\n\t\t/* All these routines can be implemented with the basic edge\n\t\t* operations above.  They are provided for convenience and efficiency.\n\t\t*/\n\n\n\t\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\taddEdgeVertex: function(eOrg) {\n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\n\t\t\tvar newVertex = new TESSvertex();\n\t\t\tthis.makeVertex_( newVertex, eNewSym, eNew.Org );\n\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\tsplitEdge: function(eOrg, eDst) {\n\t\t\tvar tempHalfEdge = this.addEdgeVertex( eOrg );\n\t\t\tvar eNew = tempHalfEdge.Sym;\n\n\t\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\n\t\t\tthis.splice_( eOrg.Sym, eOrg.Sym.Oprev );\n\t\t\tthis.splice_( eOrg.Sym, eNew );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teOrg.Dst = eNew.Org;\n\t\t\teNew.Dst.anEdge = eNew.Sym;\t/* may have pointed to eOrg->Sym */\n\t\t\teNew.Rface = eOrg.Rface;\n\t\t\teNew.winding = eOrg.winding;\t/* copy old winding information */\n\t\t\teNew.Sym.winding = eOrg.Sym.winding;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t\t*\n\t\t* If (eOrg == eDst), the new face will have only two edges.\n\t\t* If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\n\t\t* If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\n\t\t*/\n\n\t\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\n\t\tconnect: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;  \n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\t\t\tthis.splice_( eNewSym, eDst );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\t\t\teNewSym.Org = eDst.Org;\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\t/* Make sure the old face points to a valid half-edge */\n\t\t\teOrg.Lface.anEdge = eNewSym;\n\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();\n\t\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\n\t\t\t\tthis.makeFace_( newFace, eNew, eOrg.Lface );\n\t\t\t}\n\t\t\treturn eNew;\n\t\t},\n\n\t\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t\t* left face.  Any edges which also have a NULL pointer as their right face\n\t\t* are deleted entirely (along with any isolated vertices this produces).\n\t\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t\t*/\n\t\tzapFace: function( fZap )\n\t\t{\n\t\t\tvar eStart = fZap.anEdge;\n\t\t\tvar e, eNext, eSym;\n\t\t\tvar fPrev, fNext;\n\n\t\t\t/* walk around face, deleting edges whose right face is also NULL */\n\t\t\teNext = eStart.Lnext;\n\t\t\tdo {\n\t\t\t\te = eNext;\n\t\t\t\teNext = e.Lnext;\n\n\t\t\t\te.Lface = null;\n\t\t\t\tif( e.Rface === null ) {\n\t\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\n\n\t\t\t\t\tif( e.Onext === e ) {\n\t\t\t\t\t\tthis.killVertex_( e.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\n\t\t\t\t\t\te.Org.anEdge = e.Onext;\n\t\t\t\t\t\tthis.splice_( e, e.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\teSym = e.Sym;\n\t\t\t\t\tif( eSym.Onext === eSym ) {\n\t\t\t\t\t\tthis.killVertex_( eSym.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\n\t\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\n\t\t\t\t\t\tthis.splice_( eSym, eSym.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\tthis.killEdge_( e );\n\t\t\t\t}\n\t\t\t} while( e != eStart );\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tfPrev = fZap.prev;\n\t\t\tfNext = fZap.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\tcountFaceVerts_: function(f) {\n\t\t\tvar eCur = f.anEdge;\n\t\t\tvar n = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tn++;\n\t\t\t\teCur = eCur.Lnext;\n\t\t\t}\n\t\t\twhile (eCur !== f.anEdge);\n\t\t\treturn n;\n\t\t},\n\n\t\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\n\t\tmergeConvexFaces: function(maxVertsPerFace) {\n\t\t\tvar f;\n\t\t\tvar eCur, eNext, eSym;\n\t\t\tvar vStart;\n\t\t\tvar curNv, symNv;\n\n\t\t\tfor( f = this.fHead.next; f !== this.fHead; f = f.next )\n\t\t\t{\n\t\t\t\t// Skip faces which are outside the result.\n\t\t\t\tif( !f.inside )\n\t\t\t\t\tcontinue;\n\n\t\t\t\teCur = f.anEdge;\n\t\t\t\tvStart = eCur.Org;\n\t\t\t\t\t\n\t\t\t\twhile (true)\n\t\t\t\t{\n\t\t\t\t\teNext = eCur.Lnext;\n\t\t\t\t\teSym = eCur.Sym;\n\n\t\t\t\t\t// Try to merge if the neighbour face is valid.\n\t\t\t\t\tif( eSym && eSym.Lface && eSym.Lface.inside )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\n\t\t\t\t\t\t// does not exceed maximum number of vertices.\n\t\t\t\t\t\tcurNv = this.countFaceVerts_( f );\n\t\t\t\t\t\tsymNv = this.countFaceVerts_( eSym.Lface );\n\t\t\t\t\t\tif( (curNv+symNv-2) <= maxVertsPerFace )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Merge if the resulting poly is convex.\n\t\t\t\t\t\t\tif( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&\n\t\t\t\t\t\t\t\tGeom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teNext = eSym.Lnext;\n\t\t\t\t\t\t\t\tthis.delete( eSym );\n\t\t\t\t\t\t\t\teCur = null;\n\t\t\t\t\t\t\t\teSym = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif( eCur && eCur.Lnext.Org === vStart )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t// Continue to next edge.\n\t\t\t\t\teCur = eNext;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t},\n\n\t\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t\t*/\n\t\tcheck: function() {\n\t\t\tvar fHead = this.fHead;\n\t\t\tvar vHead = this.vHead;\n\t\t\tvar eHead = this.eHead;\n\t\t\tvar f, fPrev, v, vPrev, e, ePrev;\n\n\t\t\tfPrev = fHead;\n\t\t\tfor( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {\n\t\t\t\tassert( f.prev === fPrev );\n\t\t\t\te = f.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Lface === f );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tassert( f.prev === fPrev && f.anEdge === null );\n\n\t\t\tvPrev = vHead;\n\t\t\tfor( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {\n\t\t\t\tassert( v.prev === vPrev );\n\t\t\t\te = v.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Org === v );\n\t\t\t\t\te = e.Onext;\n\t\t\t\t} while( e !== v.anEdge );\n\t\t\t}\n\t\t\tassert( v.prev === vPrev && v.anEdge === null );\n\n\t\t\tePrev = eHead;\n\t\t\tfor( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {\n\t\t\t\tassert( e.Sym.next === ePrev.Sym );\n\t\t\t\tassert( e.Sym !== e );\n\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\tassert( e.Org !== null );\n\t\t\t\tassert( e.Dst !== null );\n\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t}\n\t\t\tassert( e.Sym.next === ePrev.Sym\n\t\t\t\t&& e.Sym === this.eHeadSym\n\t\t\t\t&& e.Sym.Sym === e\n\t\t\t\t&& e.Org === null && e.Dst === null\n\t\t\t\t&& e.Lface === null && e.Rface === null );\n\t\t}\n\n\t};\n\n\tvar Geom = {};\n\n\tGeom.vertEq = function(u,v) {\n\t\treturn (u.s === v.s && u.t === v.t);\n\t};\n\n\t/* Returns TRUE if u is lexicographically <= v. */\n\tGeom.vertLeq = function(u,v) {\n\t\treturn ((u.s < v.s) || (u.s === v.s && u.t <= v.t));\n\t};\n\n\t/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\n\tGeom.transLeq = function(u,v) {\n\t\treturn ((u.t < v.t) || (u.t === v.t && u.s <= v.s));\n\t};\n\n\tGeom.edgeGoesLeft = function(e) {\n\t\treturn Geom.vertLeq( e.Dst, e.Org );\n\t};\n\n\tGeom.edgeGoesRight = function(e) {\n\t\treturn Geom.vertLeq( e.Org, e.Dst );\n\t};\n\n\tGeom.vertL1dist = function(u,v) {\n\t\treturn (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));\n\t};\n\n\t//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->t = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->s)), then\n\t\t* r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t/***********************************************************************\n\t* Define versions of EdgeSign, EdgeEval with s and t transposed.\n\t*/\n\n\t//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->s = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->t)), then\n\t\t* r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches TransEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.vertCCW = function( u, v, w ) {\n\t\t/* For almost-degenerate situations, the results are not reliable.\n\t\t* Unless the floating-point arithmetic can be performed without\n\t\t* rounding errors, *any* implementation will give incorrect results\n\t\t* on some degenerate inputs, so the client must have some way to\n\t\t* handle this situation.\n\t\t*/\n\t\treturn (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;\n\t};\n\n\t/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n\t* or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n\t* this in the rare case that one argument is slightly negative.\n\t* The implementation is extremely stable numerically.\n\t* In particular it guarantees that the result r satisfies\n\t* MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n\t* even when a and b differ greatly in magnitude.\n\t*/\n\tGeom.interpolate = function(a,x,b,y) {\n\t\treturn (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));\n\t};\n\n\t/*\n\t#ifndef FOR_TRITE_TEST_PROGRAM\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\n\t#else\n\n\t// Claim: the ONLY property the sweep algorithm relies on is that\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\n\t#include <stdlib.h>\n\textern int RandomInterpolate;\n\n\tdouble Interpolate( double a, double x, double b, double y)\n\t{\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\n\t\tif( RandomInterpolate ) {\n\t\t\ta = 1.2 * drand48() - 0.1;\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\n\t\t\tb = 1.0 - a;\n\t\t}\n\t\treturn RealInterpolate(a,x,b,y);\n\t}\n\t#endif*/\n\n\tGeom.intersect = function( o1, d1, o2, d2, v ) {\n\t\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n\t\t* The computed point is guaranteed to lie in the intersection of the\n\t\t* bounding rectangles defined by each edge.\n\t\t*/\n\t\tvar z1, z2;\n\t\tvar t;\n\n\t\t/* This is certainly not the most efficient way to find the intersection\n\t\t* of two line segments, but it is very numerically stable.\n\t\t*\n\t\t* Strategy: find the two middle vertices in the VertLeq ordering,\n\t\t* and interpolate the intersection s-value from these.  Then repeat\n\t\t* using the TransLeq ordering to find the intersection t-value.\n\t\t*/\n\n\t\tif( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.vertLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.s = (o2.s + d1.s) / 2;\n\t\t} else if( Geom.vertLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.edgeEval( o1, o2, d1 );\n\t\t\tz2 = Geom.edgeEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d1.s );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.edgeSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.edgeSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d2.s );\n\t\t}\n\n\t\t/* Now repeat the process for t */\n\n\t\tif( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.transLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.t = (o2.t + d1.t) / 2;\n\t\t} else if( Geom.transLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.transEval( o1, o2, d1 );\n\t\t\tz2 = Geom.transEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d1.t );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.transSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.transSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d2.t );\n\t\t}\n\t};\n\n\n\n\tfunction DictNode() {\n\t\tthis.key = null;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\t};\n\n\tfunction Dict(frame, leq) {\n\t\tthis.head = new DictNode();\n\t\tthis.head.next = this.head;\n\t\tthis.head.prev = this.head;\n\t\tthis.frame = frame;\n\t\tthis.leq = leq;\n\t};\n\n\tDict.prototype = {\n\t\tmin: function() {\n\t\t\treturn this.head.next;\n\t\t},\n\n\t\tmax: function() {\n\t\t\treturn this.head.prev;\n\t\t},\n\n\t\tinsert: function(k) {\n\t\t\treturn this.insertBefore(this.head, k);\n\t\t},\n\n\t\tsearch: function(key) {\n\t\t\t/* Search returns the node with the smallest key greater than or equal\n\t\t\t* to the given key.  If there is no such key, returns a node whose\n\t\t\t* key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\n\t\t\t*/\n\t\t\tvar node = this.head;\n\t\t\tdo {\n\t\t\t\tnode = node.next;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, key, node.key));\n\n\t\t\treturn node;\n\t\t},\n\n\t\tinsertBefore: function(node, key) {\n\t\t\tdo {\n\t\t\t\tnode = node.prev;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, node.key, key));\n\n\t\t\tvar newNode = new DictNode();\n\t\t\tnewNode.key = key;\n\t\t\tnewNode.next = node.next;\n\t\t\tnode.next.prev = newNode;\n\t\t\tnewNode.prev = node;\n\t\t\tnode.next = newNode;\n\n\t\t\treturn newNode;\n\t\t},\n\n\t\tdelete: function(node) {\n\t\t\tnode.next.prev = node.prev;\n\t\t\tnode.prev.next = node.next;\n\t\t}\n\t};\n\n\n\tfunction PQnode() {\n\t\tthis.handle = null;\n\t}\n\n\tfunction PQhandleElem() {\n\t\tthis.key = null;\n\t\tthis.node = null;\n\t}\n\n\tfunction PriorityQ(size, leq) {\n\t\tthis.size = 0;\n\t\tthis.max = size;\n\n\t\tthis.nodes = [];\n\t\tthis.nodes.length = size+1;\n\t\tfor (var i = 0; i < this.nodes.length; i++)\n\t\t\tthis.nodes[i] = new PQnode();\n\n\t\tthis.handles = [];\n\t\tthis.handles.length = size+1;\n\t\tfor (var i = 0; i < this.handles.length; i++)\n\t\t\tthis.handles[i] = new PQhandleElem();\n\n\t\tthis.initialized = false;\n\t\tthis.freeList = 0;\n\t\tthis.leq = leq;\n\n\t\tthis.nodes[1].handle = 1;\t/* so that Minimum() returns NULL */\n\t\tthis.handles[1].key = null;\n\t};\n\n\tPriorityQ.prototype = {\n\n\t\tfloatDown_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hChild;\n\t\t\tvar child;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tchild = curr << 1;\n\t\t\t\tif( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {\n\t\t\t\t\t++child;\n\t\t\t\t}\n\n\t\t\t\tassert(child <= this.max);\n\n\t\t\t\thChild = n[child].handle;\n\t\t\t\tif( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hChild;\n\t\t\t\th[hChild].node = curr;\n\t\t\t\tcurr = child;\n\t\t\t}\n\t\t},\n\n\t\tfloatUp_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hParent;\n\t\t\tvar parent;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tparent = curr >> 1;\n\t\t\t\thParent = n[parent].handle;\n\t\t\t\tif( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hParent;\n\t\t\t\th[hParent].node = curr;\n\t\t\t\tcurr = parent;\n\t\t\t}\n\t\t},\n\n\t\tinit: function() {\n\t\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\n\t\t\tfor( var i = this.size; i >= 1; --i ) {\n\t\t\t\tthis.floatDown_( i );\n\t\t\t}\n\t\t\tthis.initialized = true;\n\t\t},\n\n\t\tmin: function() {\n\t\t\treturn this.handles[this.nodes[1].handle].key;\n\t\t},\n\n\t\tisEmpty: function() {\n\t\t\tthis.size === 0;\n\t\t},\n\n\t\t/* really pqHeapInsert */\n\t\t/* returns INV_HANDLE iff out of memory */\n\t\t//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\n\t\tinsert: function(keyNew)\n\t\t{\n\t\t\tvar curr;\n\t\t\tvar free;\n\n\t\t\tcurr = ++this.size;\n\t\t\tif( (curr*2) > this.max ) {\n\t\t\t\tthis.max *= 2;\n\t\t\t\tvar s;\n\t\t\t\ts = this.nodes.length;\n\t\t\t\tthis.nodes.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.nodes.length; i++)\n\t\t\t\t\tthis.nodes[i] = new PQnode();\n\n\t\t\t\ts = this.handles.length;\n\t\t\t\tthis.handles.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.handles.length; i++)\n\t\t\t\t\tthis.handles[i] = new PQhandleElem();\n\t\t\t}\n\n\t\t\tif( this.freeList === 0 ) {\n\t\t\t\tfree = curr;\n\t\t\t} else {\n\t\t\t\tfree = this.freeList;\n\t\t\t\tthis.freeList = this.handles[free].node;\n\t\t\t}\n\n\t\t\tthis.nodes[curr].handle = free;\n\t\t\tthis.handles[free].node = curr;\n\t\t\tthis.handles[free].key = keyNew;\n\n\t\t\tif( this.initialized ) {\n\t\t\t\tthis.floatUp_( curr );\n\t\t\t}\n\t\t\treturn free;\n\t\t},\n\n\t\t//PQkey pqHeapExtractMin( PriorityQHeap *pq )\n\t\textractMin: function() {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hMin = n[1].handle;\n\t\t\tvar min = h[hMin].key;\n\n\t\t\tif( this.size > 0 ) {\n\t\t\t\tn[1].handle = n[this.size].handle;\n\t\t\t\th[n[1].handle].node = 1;\n\n\t\t\t\th[hMin].key = null;\n\t\t\t\th[hMin].node = this.freeList;\n\t\t\t\tthis.freeList = hMin;\n\n\t\t\t\t--this.size;\n\t\t\t\tif( this.size > 0 ) {\n\t\t\t\t\tthis.floatDown_( 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min;\n\t\t},\n\n\t\tdelete: function( hCurr ) {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar curr;\n\n\t\t\tassert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );\n\n\t\t\tcurr = h[hCurr].node;\n\t\t\tn[curr].handle = n[this.size].handle;\n\t\t\th[n[curr].handle].node = curr;\n\n\t\t\t--this.size;\n\t\t\tif( curr <= this.size ) {\n\t\t\t\tif( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {\n\t\t\t\t\tthis.floatDown_( curr );\n\t\t\t\t} else {\n\t\t\t\t\tthis.floatUp_( curr );\n\t\t\t\t}\n\t\t\t}\n\t\t\th[hCurr].key = null;\n\t\t\th[hCurr].node = this.freeList;\n\t\t\tthis.freeList = hCurr;\n\t\t}\n\t};\n\n\n\t/* For each pair of adjacent edges crossing the sweep line, there is\n\t* an ActiveRegion to represent the region between them.  The active\n\t* regions are kept in sorted order in a dynamic dictionary.  As the\n\t* sweep line crosses each vertex, we update the affected regions.\n\t*/\n\n\tfunction ActiveRegion() {\n\t\tthis.eUp = null;\t\t/* upper edge, directed right to left */\n\t\tthis.nodeUp = null;\t/* dictionary node corresponding to eUp */\n\t\tthis.windingNumber = 0;\t/* used to determine which regions are\n\t\t\t\t\t\t\t\t* inside the polygon */\n\t\tthis.inside = false;\t\t/* is this region inside the polygon? */\n\t\tthis.sentinel = false;\t/* marks fake edges at t = +/-infinity */\n\t\tthis.dirty = false;\t\t/* marks regions where the upper or lower\n\t\t\t\t\t\t* edge has changed, but we haven't checked\n\t\t\t\t\t\t* whether they intersect yet */\n\t\tthis.fixUpperEdge = false;\t/* marks temporary edges introduced when\n\t\t\t\t\t\t\t* we process a \"right vertex\" (one without\n\t\t\t\t\t\t\t* any edges leaving to the right) */\n\t};\n\n\tvar Sweep = {};\n\n\tSweep.regionBelow = function(r) {\n\t\treturn r.nodeUp.prev.key;\n\t}\n\n\tSweep.regionAbove = function(r) {\n\t\treturn r.nodeUp.next.key;\n\t}\n\n\tSweep.debugEvent = function( tess ) {\n\t\t// empty\n\t}\n\n\n\t/*\n\t* Invariants for the Edge Dictionary.\n\t* - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n\t*   at any valid location of the sweep event\n\t* - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n\t*   share a common endpoint\n\t* - for each e, e->Dst has been processed, but not e->Org\n\t* - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\n\t*   where \"event\" is the current sweep line event.\n\t* - no edge e has zero length\n\t*\n\t* Invariants for the Mesh (the processed portion).\n\t* - the portion of the mesh left of the sweep line is a planar graph,\n\t*   ie. there is *some* way to embed it in the plane\n\t* - no processed edge has zero length\n\t* - no two processed vertices have identical coordinates\n\t* - each \"inside\" region is monotone, ie. can be broken into two chains\n\t*   of monotonically increasing vertices according to VertLeq(v1,v2)\n\t*   - a non-invariant: these chains may intersect (very slightly)\n\t*\n\t* Invariants for the Sweep.\n\t* - if none of the edges incident to the event vertex have an activeRegion\n\t*   (ie. none of these edges are in the edge dictionary), then the vertex\n\t*   has only right-going edges.\n\t* - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n\t*   by ConnectRightVertex), then it is the only right-going edge from\n\t*   its associated vertex.  (This says that these edges exist only\n\t*   when it is necessary.)\n\t*/\n\n\t/* When we merge two edges into one, we need to compute the combined\n\t* winding of the new edge.\n\t*/\n\tSweep.addWinding = function(eDst,eSrc) {\n\t\teDst.winding += eSrc.winding;\n\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t}\n\n\n\t//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\n\tSweep.edgeLeq = function( tess, reg1, reg2 ) {\n\t\t/*\n\t\t* Both edges must be directed from right to left (this is the canonical\n\t\t* direction for the upper edge of each region).\n\t\t*\n\t\t* The strategy is to evaluate a \"t\" value for each edge at the\n\t\t* current sweep line position, given by tess->event.  The calculations\n\t\t* are designed to be very stable, but of course they are not perfect.\n\t\t*\n\t\t* Special case: if both edge destinations are at the sweep event,\n\t\t* we sort the edges by slope (they would otherwise compare equally).\n\t\t*/\n\t\tvar ev = tess.event;\n\t\tvar t1, t2;\n\n\t\tvar e1 = reg1.eUp;\n\t\tvar e2 = reg2.eUp;\n\n\t\tif( e1.Dst === ev ) {\n\t\t\tif( e2.Dst === ev ) {\n\t\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\n\t\t\t\t* Sort them by slope.\n\t\t\t\t*/\n\t\t\t\tif( Geom.vertLeq( e1.Org, e2.Org )) {\n\t\t\t\t\treturn Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;\n\t\t\t\t}\n\t\t\t\treturn Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;\n\t\t\t}\n\t\t\treturn Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;\n\t\t}\n\t\tif( e2.Dst === ev ) {\n\t\t\treturn Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;\n\t\t}\n\n\t\t/* General case - compute signed distance *from* e1, e2 to event */\n\t\tvar t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );\n\t\tvar t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );\n\t\treturn (t1 >= t2);\n\t}\n\n\n\t//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.deleteRegion = function( tess, reg ) {\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* It was created with zero winding number, so it better be\n\t\t\t* deleted with zero winding number (ie. it better not get merged\n\t\t\t* with a real edge).\n\t\t\t*/\n\t\t\tassert( reg.eUp.winding === 0 );\n\t\t}\n\t\treg.eUp.activeRegion = null;\n\t\ttess.dict.delete( reg.nodeUp );\n\t}\n\n\t//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\n\tSweep.fixUpperEdge = function( tess, reg, newEdge ) {\n\t\t/*\n\t\t* Replace an upper edge which needs fixing (see ConnectRightVertex).\n\t\t*/\n\t\tassert( reg.fixUpperEdge );\n\t\ttess.mesh.delete( reg.eUp );\n\t\treg.fixUpperEdge = false;\n\t\treg.eUp = newEdge;\n\t\tnewEdge.activeRegion = reg;\n\t}\n\n\t//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.topLeftRegion = function( tess, reg ) {\n\t\tvar org = reg.eUp.Org;\n\t\tvar e;\n\n\t\t/* Find the region above the uppermost edge with the same origin */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Org === org );\n\n\t\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\n\t\t* now is the time to fix it.\n\t\t*/\n\t\tif( reg.fixUpperEdge ) {\n\t\t\te = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );\n\t\t\tif (e === null) return null;\n\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t}\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\n\tSweep.topRightRegion = function( reg )\n\t{\n\t\tvar dst = reg.eUp.Dst;\n\t\tvar reg = null;\n\t\t/* Find the region above the uppermost edge with the same destination */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Dst === dst );\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\n\tSweep.addRegionBelow = function( tess, regAbove, eNewUp ) {\n\t\t/*\n\t\t* Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n\t\t* (according to where the new edge belongs in the sweep-line dictionary).\n\t\t* The upper edge of the new region will be \"eNewUp\".\n\t\t* Winding number and \"inside\" flag are not updated.\n\t\t*/\n\t\tvar regNew = new ActiveRegion();\n\t\tregNew.eUp = eNewUp;\n\t\tregNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );\n\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\n\t\tregNew.fixUpperEdge = false;\n\t\tregNew.sentinel = false;\n\t\tregNew.dirty = false;\n\n\t\teNewUp.activeRegion = regNew;\n\t\treturn regNew;\n\t}\n\n\t//static int IsWindingInside( TESStesselator *tess, int n )\n\tSweep.isWindingInside = function( tess, n ) {\n\t\tswitch( tess.windingRule ) {\n\t\t\tcase Tess2.WINDING_ODD:\n\t\t\t\treturn (n & 1) != 0;\n\t\t\tcase Tess2.WINDING_NONZERO:\n\t\t\t\treturn (n != 0);\n\t\t\tcase Tess2.WINDING_POSITIVE:\n\t\t\t\treturn (n > 0);\n\t\t\tcase Tess2.WINDING_NEGATIVE:\n\t\t\t\treturn (n < 0);\n\t\t\tcase Tess2.WINDING_ABS_GEQ_TWO:\n\t\t\t\treturn (n >= 2) || (n <= -2);\n\t\t}\n\t\tassert( false );\n\t\treturn false;\n\t}\n\n\t//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.computeWinding = function( tess, reg ) {\n\t\treg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\n\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\t}\n\n\n\t//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.finishRegion = function( tess, reg ) {\n\t\t/*\n\t\t* Delete a region from the sweep line.  This happens when the upper\n\t\t* and lower chains of a region meet (at a vertex on the sweep line).\n\t\t* The \"inside\" flag is copied to the appropriate mesh face (we could\n\t\t* not do this before -- since the structure of the mesh is always\n\t\t* changing, this face may not have even existed until now).\n\t\t*/\n\t\tvar e = reg.eUp;\n\t\tvar f = e.Lface;\n\n\t\tf.inside = reg.inside;\n\t\tf.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */\n\t\tSweep.deleteRegion( tess, reg );\n\t}\n\n\n\t//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\n\tSweep.finishLeftRegions = function( tess, regFirst, regLast ) {\n\t\t/*\n\t\t* We are given a vertex with one or more left-going edges.  All affected\n\t\t* edges should be in the edge dictionary.  Starting at regFirst->eUp,\n\t\t* we walk down deleting all regions where both edges have the same\n\t\t* origin vOrg.  At the same time we copy the \"inside\" flag from the\n\t\t* active region to the face, since at this point each face will belong\n\t\t* to at most one region (this was not necessarily true until this point\n\t\t* in the sweep).  The walk stops at the region above regLast; if regLast\n\t\t* is NULL we walk as far as possible.  At the same time we relink the\n\t\t* mesh if necessary, so that the ordering of edges around vOrg is the\n\t\t* same as in the dictionary.\n\t\t*/\n\t\tvar e, ePrev;\n\t\tvar reg = null;\n\t\tvar regPrev = regFirst;\n\t\tvar ePrev = regFirst.eUp;\n\t\twhile( regPrev !== regLast ) {\n\t\t\tregPrev.fixUpperEdge = false;\t/* placement was OK */\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp;\n\t\t\tif( e.Org != ePrev.Org ) {\n\t\t\t\tif( ! reg.fixUpperEdge ) {\n\t\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\n\t\t\t\t\t* edges in the dictionary with this origin, there may be further\n\t\t\t\t\t* such edges in the mesh (if we are adding left edges to a vertex\n\t\t\t\t\t* that has already been processed).  Thus it is important to call\n\t\t\t\t\t* FinishRegion rather than just DeleteRegion.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.finishRegion( tess, regPrev );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* If the edge below was a temporary edge introduced by\n\t\t\t\t* ConnectRightVertex, now is the time to fix it.\n\t\t\t\t*/\n\t\t\t\te = tess.mesh.connect( ePrev.Lprev, e.Sym );\n\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\n\t\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\t}\n\n\t\t\t/* Relink edges so that ePrev->Onext == e */\n\t\t\tif( ePrev.Onext !== e ) {\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev, e );\n\t\t\t}\n\t\t\tSweep.finishRegion( tess, regPrev );\t/* may change reg->eUp */\n\t\t\tePrev = reg.eUp;\n\t\t\tregPrev = reg;\n\t\t}\n\t\treturn ePrev;\n\t}\n\n\n\t//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\n\tSweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {\n\t\t/*\n\t\t* Purpose: insert right-going edges into the edge dictionary, and update\n\t\t* winding numbers and mesh connectivity appropriately.  All right-going\n\t\t* edges share a common origin vOrg.  Edges are inserted CCW starting at\n\t\t* eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\n\t\t* left-going edges already processed, then eTopLeft must be the edge\n\t\t* such that an imaginary upward vertical segment from vOrg would be\n\t\t* contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\n\t\t* should be NULL.\n\t\t*/\n\t\tvar reg, regPrev;\n\t\tvar e, ePrev;\n\t\tvar firstTime = true;\n\n\t\t/* Insert the new right-going edges in the dictionary */\n\t\te = eFirst;\n\t\tdo {\n\t\t\tassert( Geom.vertLeq( e.Org, e.Dst ));\n\t\t\tSweep.addRegionBelow( tess, regUp, e.Sym );\n\t\t\te = e.Onext;\n\t\t} while ( e !== eLast );\n\n\t\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\n\t\t* updating the winding numbers of each region, and re-linking the mesh\n\t\t* edges to match the dictionary ordering (if necessary).\n\t\t*/\n\t\tif( eTopLeft === null ) {\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;\n\t\t}\n\t\tregPrev = regUp;\n\t\tePrev = eTopLeft;\n\t\tfor( ;; ) {\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp.Sym;\n\t\t\tif( e.Org !== ePrev.Org ) break;\n\n\t\t\tif( e.Onext !== ePrev ) {\n\t\t\t\t/* Unlink e from its current position, and relink below ePrev */\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev.Oprev, e );\n\t\t\t}\n\t\t\t/* Compute the winding number and \"inside\" flag for the new regions */\n\t\t\treg.windingNumber = regPrev.windingNumber - e.winding;\n\t\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\n\t\t\t/* Check for two outgoing edges with same slope -- process these\n\t\t\t* before any intersection tests (see example in tessComputeInterior).\n\t\t\t*/\n\t\t\tregPrev.dirty = true;\n\t\t\tif( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {\n\t\t\t\tSweep.addWinding( e, ePrev );\n\t\t\t\tSweep.deleteRegion( tess, regPrev );\n\t\t\t\ttess.mesh.delete( ePrev );\n\t\t\t}\n\t\t\tfirstTime = false;\n\t\t\tregPrev = reg;\n\t\t\tePrev = e;\n\t\t}\n\t\tregPrev.dirty = true;\n\t\tassert( regPrev.windingNumber - e.winding === reg.windingNumber );\n\n\t\tif( cleanUp ) {\n\t\t\t/* Check for intersections between newly adjacent edges. */\n\t\t\tSweep.walkDirtyRegions( tess, regPrev );\n\t\t}\n\t}\n\n\n\t//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\n\tSweep.spliceMergeVertices = function( tess, e1, e2 ) {\n\t\t/*\n\t\t* Two vertices with idential coordinates are combined into one.\n\t\t* e1->Org is kept, while e2->Org is discarded.\n\t\t*/\n\t\ttess.mesh.splice( e1, e2 ); \n\t}\n\n\t//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\n\tSweep.vertexWeights = function( isect, org, dst ) {\n\t\t/*\n\t\t* Find some weights which describe how the intersection vertex is\n\t\t* a linear combination of \"org\" and \"dest\".  Each of the two edges\n\t\t* which generated \"isect\" is allocated 50% of the weight; each edge\n\t\t* splits the weight between its org and dst according to the\n\t\t* relative distance to \"isect\".\n\t\t*/\n\t\tvar t1 = Geom.vertL1dist( org, isect );\n\t\tvar t2 = Geom.vertL1dist( dst, isect );\n\t\tvar w0 = 0.5 * t2 / (t1 + t2);\n\t\tvar w1 = 0.5 * t1 / (t1 + t2);\n\t\tisect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];\n\t\tisect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];\n\t\tisect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];\n\t}\n\n\n\t//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\n\tSweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {\n\t\t /*\n\t\t * We've computed a new intersection point, now we need a \"data\" pointer\n\t\t * from the user so that we can refer to this new vertex in the\n\t\t * rendering callbacks.\n\t\t */\n\t\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\n\t\tisect.idx = -1;\n\t\tSweep.vertexWeights( isect, orgUp, dstUp );\n\t\tSweep.vertexWeights( isect, orgLo, dstLo );\n\t}\n\n\t//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForRightSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\n\t\t* origin is leftmost).\n\t\t*\n\t\t* The main purpose is to splice right-going edges with the same\n\t\t* dest vertex and nearly identical slopes (ie. we can't distinguish\n\t\t* the slopes numerically).  However the splicing can also help us\n\t\t* to recover from numerical errors.  For example, suppose at one\n\t\t* point we checked eUp and eLo, and decided that eUp->Org is barely\n\t\t* above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* our test so that now eUp->Org is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants.\n\t\t*\n\t\t* One possibility is to check these edges for intersection again\n\t\t* (ie. CheckForIntersect).  This is what we do if possible.  However\n\t\t* CheckForIntersect requires that tess->event lies between eUp and eLo,\n\t\t* so that it has something to fall back on when the intersection\n\t\t* calculation gives us an unusable answer.  So, for those cases where\n\t\t* we can't check for intersection, this routine fixes the problem\n\t\t* by just splicing the offending vertex into the other edge.\n\t\t* This is a guaranteed solution, no matter how degenerate things get.\n\t\t* Basically this is a combinatorial solution to a numerical problem.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\n\t\tif( Geom.vertLeq( eUp.Org, eLo.Org )) {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Org appears to be below eLo */\n\t\t\tif( ! Geom.vertEq( eUp.Org, eLo.Org )) {\n\t\t\t\t/* Splice eUp->Org into eLo */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp, eLo.Oprev );\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\n\t\t\t} else if( eUp.Org !== eLo.Org ) {\n\t\t\t\t/* merge the two vertices, discarding eUp->Org */\n\t\t\t\ttess.pq.delete( eUp.Org.pqHandle );\n\t\t\t\tSweep.spliceMergeVertices( tess, eLo.Oprev, eUp );\n\t\t\t}\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\t}\n\t\treturn true;\n\t}\n\n\t//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForLeftSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\n\t\t* destination is rightmost).\n\t\t*\n\t\t* Theoretically, this should always be true.  However, splitting an edge\n\t\t* into two pieces can change the results of previous tests.  For example,\n\t\t* suppose at one point we checked eUp and eLo, and decided that eUp->Dst\n\t\t* is barely above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* the test so that now eUp->Dst is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants\n\t\t* (otherwise new edges might get inserted in the wrong place in the\n\t\t* dictionary, and bad stuff will happen).\n\t\t*\n\t\t* We fix the problem by just splicing the offending vertex into the\n\t\t* other edge.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));\n\n\t\tif( Geom.vertLeq( eUp.Dst, eLo.Dst )) {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eUp );\n\t\t\ttess.mesh.splice( eLo.Sym, e );\n\t\t\te.Lface.inside = regUp.inside;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\n\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eLo );\n\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Sym );\n\t\t\te.Rface.inside = regUp.inside;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForIntersect = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edges of the given region to see if\n\t\t* they intersect.  If so, create the intersection and add it\n\t\t* to the data structures.\n\t\t*\n\t\t* Returns TRUE if adding the new intersection resulted in a recursive\n\t\t* call to AddRightEdges(); in this case all \"dirty\" regions have been\n\t\t* checked for intersections, and possibly regUp has been deleted.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar orgUp = eUp.Org;\n\t\tvar orgLo = eLo.Org;\n\t\tvar dstUp = eUp.Dst;\n\t\tvar dstLo = eLo.Dst;\n\t\tvar tMinUp, tMaxLo;\n\t\tvar isect = new TESSvertex, orgMin;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( dstLo, dstUp ));\n\t\tassert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );\n\t\tassert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );\n\t\tassert( orgUp !== tess.event && orgLo !== tess.event );\n\t\tassert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );\n\n\t\tif( orgUp === orgLo ) return false;\t/* right endpoints are the same */\n\n\t\ttMinUp = Math.min( orgUp.t, dstUp.t );\n\t\ttMaxLo = Math.max( orgLo.t, dstLo.t );\n\t\tif( tMinUp > tMaxLo ) return false;\t/* t ranges do not overlap */\n\n\t\tif( Geom.vertLeq( orgUp, orgLo )) {\n\t\t\tif( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;\n\t\t}\n\n\t\t/* At this point the edges intersect, at least marginally */\n\t\tSweep.debugEvent( tess );\n\n\t\tGeom.intersect( dstUp, orgUp, dstLo, orgLo, isect );\n\t\t/* The following properties are guaranteed: */\n\t\tassert( Math.min( orgUp.t, dstUp.t ) <= isect.t );\n\t\tassert( isect.t <= Math.max( orgLo.t, dstLo.t ));\n\t\tassert( Math.min( dstLo.s, dstUp.s ) <= isect.s );\n\t\tassert( isect.s <= Math.max( orgLo.s, orgUp.s ));\n\n\t\tif( Geom.vertLeq( isect, tess.event )) {\n\t\t\t/* The intersection point lies slightly to the left of the sweep line,\n\t\t\t* so move it until it''s slightly to the right of the sweep line.\n\t\t\t* (If we had perfect numerical precision, this would never happen\n\t\t\t* in the first place).  The easiest and safest thing to do is\n\t\t\t* replace the intersection by tess->event.\n\t\t\t*/\n\t\t\tisect.s = tess.event.s;\n\t\t\tisect.t = tess.event.t;\n\t\t}\n\t\t/* Similarly, if the computed intersection lies to the right of the\n\t\t* rightmost origin (which should rarely happen), it can cause\n\t\t* unbelievable inefficiency on sufficiently degenerate inputs.\n\t\t* (If you have the test program, try running test54.d with the\n\t\t* \"X zoom\" option turned on).\n\t\t*/\n\t\torgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;\n\t\tif( Geom.vertLeq( orgMin, isect )) {\n\t\t\tisect.s = orgMin.s;\n\t\t\tisect.t = orgMin.t;\n\t\t}\n\n\t\tif( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {\n\t\t\t/* Easy case -- intersection at one of the right endpoints */\n\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\treturn false;\n\t\t}\n\n\t\tif(    (! Geom.vertEq( dstUp, tess.event )\n\t\t\t&& Geom.edgeSign( dstUp, tess.event, isect ) >= 0)\n\t\t\t|| (! Geom.vertEq( dstLo, tess.event )\n\t\t\t&& Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))\n\t\t{\n\t\t\t/* Very unusual -- the new upper or lower edge would pass on the\n\t\t\t* wrong side of the sweep event, or through it.  This can happen\n\t\t\t* due to very small numerical errors in the intersection calculation.\n\t\t\t*/\n\t\t\tif( dstLo === tess.event ) {\n\t\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\ttess.mesh.splice( eLo.Sym, eUp );\n\t\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\n\t\t\t\teUp = Sweep.regionBelow(regUp).eUp;\n\t\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t\tif( dstUp === tess.event ) {\n\t\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Oprev ); \n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.topRightRegion( regUp );\n\t\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\n\t\t\t\tregLo.eUp = eLo.Oprev;\n\t\t\t\teLo = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/* Special case: called from ConnectRightVertex.  If either\n\t\t\t* edge passes on the wrong side of tess->event, split it\n\t\t\t* (and wait for ConnectRightVertex to splice it appropriately).\n\t\t\t*/\n\t\t\tif( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {\n\t\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\teUp.Org.s = tess.event.s;\n\t\t\t\teUp.Org.t = tess.event.t;\n\t\t\t}\n\t\t\tif( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\teLo.Org.s = tess.event.s;\n\t\t\t\teLo.Org.t = tess.event.t;\n\t\t\t}\n\t\t\t/* leave the rest for ConnectRightVertex */\n\t\t\treturn false;\n\t\t}\n\n\t\t/* General case -- split both edges, splice into new vertex.\n\t\t* When we do the splice operation, the order of the arguments is\n\t\t* arbitrary as far as correctness goes.  However, when the operation\n\t\t* creates a new face, the work done is proportional to the size of\n\t\t* the new face.  We expect the faces in the processed part of\n\t\t* the mesh (ie. eUp->Lface) to be smaller than the faces in the\n\t\t* unprocessed original contours (which will be eLo->Oprev->Lface).\n\t\t*/\n\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\teUp.Org.s = isect.s;\n\t\teUp.Org.t = isect.t;\n\t\teUp.Org.pqHandle = tess.pq.insert( eUp.Org );\n\t\tSweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\n\t\treturn false;\n\t}\n\n\t//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.walkDirtyRegions = function( tess, regUp ) {\n\t\t/*\n\t\t* When the upper or lower edge of any region changes, the region is\n\t\t* marked \"dirty\".  This routine walks through all the dirty regions\n\t\t* and makes sure that the dictionary invariants are satisfied\n\t\t* (see the comments at the beginning of this file).  Of course\n\t\t* new dirty regions can be created as we make changes to restore\n\t\t* the invariants.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp, eLo;\n\n\t\tfor( ;; ) {\n\t\t\t/* Find the lowest dirty region (we walk from the bottom up). */\n\t\t\twhile( regLo.dirty ) {\n\t\t\t\tregUp = regLo;\n\t\t\t\tregLo = Sweep.regionBelow(regLo);\n\t\t\t}\n\t\t\tif( ! regUp.dirty ) {\n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.regionAbove( regUp );\n\t\t\t\tif( regUp == null || ! regUp.dirty ) {\n\t\t\t\t\t/* We've walked all the dirty regions */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tregUp.dirty = false;\n\t\t\teUp = regUp.eUp;\n\t\t\teLo = regLo.eUp;\n\n\t\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\n\t\t\t\tif( Sweep.checkForLeftSplice( tess, regUp )) {\n\n\t\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\n\t\t\t\t\t* we no longer need it (since these edges are needed only for\n\t\t\t\t\t* vertices which otherwise have no right-going edges).\n\t\t\t\t\t*/\n\t\t\t\t\tif( regLo.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regLo );\n\t\t\t\t\t\ttess.mesh.delete( eLo );\n\t\t\t\t\t\tregLo = Sweep.regionBelow( regUp );\n\t\t\t\t\t\teLo = regLo.eUp;\n\t\t\t\t\t} else if( regUp.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t\t\t\teUp = regUp.eUp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org !== eLo.Org ) {\n\t\t\t\tif(    eUp.Dst !== eLo.Dst\n\t\t\t\t\t&& ! regUp.fixUpperEdge && ! regLo.fixUpperEdge\n\t\t\t\t\t&& (eUp.Dst === tess.event || eLo.Dst === tess.event) )\n\t\t\t\t{\n\t\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\n\t\t\t\t\t* as the intersection location.  To make this possible, it requires\n\t\t\t\t\t* that tess->event lie between the upper and lower edges, and also\n\t\t\t\t\t* that neither of these is marked fixUpperEdge (since in the worst\n\t\t\t\t\t* case it might splice one of these edges into tess->event, and\n\t\t\t\t\t* violate the invariant that fixable edges are the only right-going\n\t\t\t\t\t* edge from their associated vertex).\n\t\t\t\t\t*/\n\t\t\t\t\tif( Sweep.checkForIntersect( tess, regUp )) {\n\t\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\n\t\t\t\t\t* may violate the dictionary edge ordering.  Check and correct this.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {\n\t\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\n\t\t\t\tSweep.addWinding( eLo, eUp );\n\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\n\tSweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {\n\t\t/*\n\t\t* Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n\t\t* to the unprocessed portion of the mesh.  Since there are no right-going\n\t\t* edges, two regions (one above vEvent and one below) are being merged\n\t\t* into one.  \"regUp\" is the upper of these two regions.\n\t\t*\n\t\t* There are two reasons for doing this (adding a right-going edge):\n\t\t*  - if the two regions being merged are \"inside\", we must add an edge\n\t\t*    to keep them separated (the combined region would not be monotone).\n\t\t*  - in any case, we must leave some record of vEvent in the dictionary,\n\t\t*    so that we can merge vEvent with features that we have not seen yet.\n\t\t*    For example, maybe there is a vertical edge which passes just to\n\t\t*    the right of vEvent; we would like to splice vEvent into this edge.\n\t\t*\n\t\t* However, we don't want to connect vEvent to just any vertex.  We don''t\n\t\t* want the new edge to cross any other edges; otherwise we will create\n\t\t* intersection vertices even when the input data had no self-intersections.\n\t\t* (This is a bad thing; if the user's input data has no intersections,\n\t\t* we don't want to generate any false intersections ourselves.)\n\t\t*\n\t\t* Our eventual goal is to connect vEvent to the leftmost unprocessed\n\t\t* vertex of the combined region (the union of regUp and regLo).\n\t\t* But because of unseen vertices with all right-going edges, and also\n\t\t* new vertices which may be created by edge intersections, we don''t\n\t\t* know where that leftmost unprocessed vertex is.  In the meantime, we\n\t\t* connect vEvent to the closest vertex of either chain, and mark the region\n\t\t* as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n\t\t* to the next processed vertex on the boundary of the combined region.\n\t\t* Quite possibly the vertex we connected to will turn out to be the\n\t\t* closest one, in which case we won''t need to make any changes.\n\t\t*/\n\t\tvar eNew;\n\t\tvar eTopLeft = eBottomLeft.Onext;\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar degenerate = false;\n\n\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\tSweep.checkForIntersect( tess, regUp );\n\t\t}\n\n\t\t/* Possible new degeneracies: upper or lower edge of regUp may pass\n\t\t* through vEvent, or may coincide with new intersection vertex\n\t\t*/\n\t\tif( Geom.vertEq( eUp.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eTopLeft.Oprev, eUp );\n\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp;\n\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( Geom.vertEq( eLo.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eBottomLeft, eLo.Oprev );\n\t\t\teBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( degenerate ) {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\n\t\t* Connect to the closer of eLo->Org, eUp->Org.\n\t\t*/\n\t\tif( Geom.vertLeq( eLo.Org, eUp.Org )) {\n\t\t\teNew = eLo.Oprev;\n\t\t} else {\n\t\t\teNew = eUp;\n\t\t}\n\t\teNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );\n\n\t\t/* Prevent cleanup, otherwise eNew might disappear before we've even\n\t\t* had a chance to mark it as a temporary edge.\n\t\t*/\n\t\tSweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );\n\t\teNew.Sym.activeRegion.fixUpperEdge = true;\n\t\tSweep.walkDirtyRegions( tess, regUp );\n\t}\n\n\t/* Because vertices at exactly the same location are merged together\n\t* before we process the sweep event, some degenerate cases can't occur.\n\t* However if someone eventually makes the modifications required to\n\t* merge features which are close together, the cases below marked\n\t* TOLERANCE_NONZERO will be useful.  They were debugged before the\n\t* code to merge identical vertices in the main loop was added.\n\t*/\n\t//#define TOLERANCE_NONZERO\tFALSE\n\n\t//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\n\tSweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {\n\t\t/*\n\t\t* The event vertex lies exacty on an already-processed edge or vertex.\n\t\t* Adding the new vertex involves splicing it into the already-processed\n\t\t* part of the mesh.\n\t\t*/\n\t\tvar e, eTopLeft, eTopRight, eLast;\n\t\tvar reg;\n\n\t\te = regUp.eUp;\n\t\tif( Geom.vertEq( e.Org, vEvent )) {\n\t\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\n\t\t\t* for e->Org to be pulled from the queue\n\t\t\t*/\n\t\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\t\tSweep.spliceMergeVertices( tess, e, vEvent.anEdge );\n\t\t\treturn;\n\t\t}\n\n\t\tif( ! Geom.vertEq( e.Dst, vEvent )) {\n\t\t\t/* General case -- splice vEvent into edge e which passes through it */\n\t\t\ttess.mesh.splitEdge( e.Sym );\n\t\t\tif( regUp.fixUpperEdge ) {\n\t\t\t\t/* This edge was fixable -- delete unused portion of original edge */\n\t\t\t\ttess.mesh.delete( e.Onext );\n\t\t\t\tregUp.fixUpperEdge = false;\n\t\t\t}\n\t\t\ttess.mesh.splice( vEvent.anEdge, e );\n\t\t\tSweep.sweepEvent( tess, vEvent );\t/* recurse */\n\t\t\treturn;\n\t\t}\n\n\t\t/* vEvent coincides with e->Dst, which has already been processed.\n\t\t* Splice in the additional right-going edges.\n\t\t*/\n\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\tregUp = Sweep.topRightRegion( regUp );\n\t\treg = Sweep.regionBelow( regUp );\n\t\teTopRight = reg.eUp.Sym;\n\t\teTopLeft = eLast = eTopRight.Onext;\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* Here e->Dst has only a single fixable edge going right.\n\t\t\t* We can delete it since now we have some real right-going edges.\n\t\t\t*/\n\t\t\tassert( eTopLeft !== eTopRight );   /* there are some left edges too */\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\ttess.mesh.delete( eTopRight );\n\t\t\teTopRight = eTopLeft.Oprev;\n\t\t}\n\t\ttess.mesh.splice( vEvent.anEdge, eTopRight );\n\t\tif( ! Geom.edgeGoesLeft( eTopLeft )) {\n\t\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\n\t\t\teTopLeft = null;\n\t\t}\n\t\tSweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );\n\t}\n\n\n\t//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.connectLeftVertex = function( tess, vEvent ) {\n\t\t/*\n\t\t* Purpose: connect a \"left\" vertex (one where both edges go right)\n\t\t* to the processed portion of the mesh.  Let R be the active region\n\t\t* containing vEvent, and let U and L be the upper and lower edge\n\t\t* chains of R.  There are two possibilities:\n\t\t*\n\t\t* - the normal case: split R into two regions, by connecting vEvent to\n\t\t*   the rightmost vertex of U or L lying to the left of the sweep line\n\t\t*\n\t\t* - the degenerate case: if vEvent is close enough to U or L, we\n\t\t*   merge vEvent into that edge chain.  The subcases are:\n\t\t*\t- merging with the rightmost vertex of U or L\n\t\t*\t- merging with the active edge of U or L\n\t\t*\t- merging with an already-processed portion of U or L\n\t\t*/\n\t\tvar regUp, regLo, reg;\n\t\tvar eUp, eLo, eNew;\n\t\tvar tmp = new ActiveRegion();\n\n\t\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\n\n\t\t/* Get a pointer to the active region containing vEvent */\n\t\ttmp.eUp = vEvent.anEdge.Sym;\n\t\t/* __GL_DICTLISTKEY */ /* tessDictListSearch */\n\t\tregUp = tess.dict.search( tmp ).key;\n\t\tregLo = Sweep.regionBelow( regUp );\n\t\tif( !regLo ) {\n\t\t\t// This may happen if the input polygon is coplanar.\n\t\t\treturn;\n\t\t}\n\t\teUp = regUp.eUp;\n\t\teLo = regLo.eUp;\n\n\t\t/* Try merging with U or L first */\n\t\tif( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {\n\t\t\tSweep.connectLeftDegenerate( tess, regUp, vEvent );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Connect vEvent to rightmost processed vertex of either chain.\n\t\t* e->Dst is the vertex that we will connect to vEvent.\n\t\t*/\n\t\treg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;\n\n\t\tif( regUp.inside || reg.fixUpperEdge) {\n\t\t\tif( reg === regUp ) {\n\t\t\t\teNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );\n\t\t\t} else {\n\t\t\t\tvar tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);\n\t\t\t\teNew = tempHalfEdge.Sym;\n\t\t\t}\n\t\t\tif( reg.fixUpperEdge ) {\n\t\t\t\tSweep.fixUpperEdge( tess, reg, eNew );\n\t\t\t} else {\n\t\t\t\tSweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, vEvent );\n\t\t} else {\n\t\t\t/* The new vertex is in a region which does not belong to the polygon.\n\t\t\t* We don''t need to connect this vertex to the rest of the mesh.\n\t\t\t*/\n\t\t\tSweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );\n\t\t}\n\t};\n\n\n\t//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.sweepEvent = function( tess, vEvent ) {\n\t\t/*\n\t\t* Does everything necessary when the sweep line crosses a vertex.\n\t\t* Updates the mesh and the edge dictionary.\n\t\t*/\n\n\t\ttess.event = vEvent;\t\t/* for access in EdgeLeq() */\n\t\tSweep.debugEvent( tess );\n\n\t\t/* Check if this vertex is the right endpoint of an edge that is\n\t\t* already in the dictionary.  In this case we don't need to waste\n\t\t* time searching for the location to insert new edges.\n\t\t*/\n\t\tvar e = vEvent.anEdge;\n\t\twhile( e.activeRegion === null ) {\n\t\t\te = e.Onext;\n\t\t\tif( e == vEvent.anEdge ) {\n\t\t\t\t/* All edges go right -- not incident to any processed edges */\n\t\t\t\tSweep.connectLeftVertex( tess, vEvent );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* Processing consists of two phases: first we \"finish\" all the\n\t\t* active regions where both the upper and lower edges terminate\n\t\t* at vEvent (ie. vEvent is closing off these regions).\n\t\t* We mark these faces \"inside\" or \"outside\" the polygon according\n\t\t* to their winding number, and delete the edges from the dictionary.\n\t\t* This takes care of all the left-going edges from vEvent.\n\t\t*/\n\t\tvar regUp = Sweep.topLeftRegion( tess, e.activeRegion );\n\t\tassert( regUp !== null );\n\t//\tif (regUp == NULL) longjmp(tess->env,1);\n\t\tvar reg = Sweep.regionBelow( regUp );\n\t\tvar eTopLeft = reg.eUp;\n\t\tvar eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );\n\n\t\t/* Next we process all the right-going edges from vEvent.  This\n\t\t* involves adding the edges to the dictionary, and creating the\n\t\t* associated \"active regions\" which record information about the\n\t\t* regions between adjacent dictionary edges.\n\t\t*/\n\t\tif( eBottomLeft.Onext === eTopLeft ) {\n\t\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\n\t\t\tSweep.connectRightVertex( tess, regUp, eBottomLeft );\n\t\t} else {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t}\n\t};\n\n\n\t/* Make the sentinel coordinates big enough that they will never be\n\t* merged with real input features.\n\t*/\n\n\t//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\n\tSweep.addSentinel = function( tess, smin, smax, t ) {\n\t\t/*\n\t\t* We add two sentinel edges above and below all other edges,\n\t\t* to avoid special cases at the top and bottom.\n\t\t*/\n\t\tvar reg = new ActiveRegion();\n\t\tvar e = tess.mesh.makeEdge();\n\t//\tif (e == NULL) longjmp(tess->env,1);\n\n\t\te.Org.s = smax;\n\t\te.Org.t = t;\n\t\te.Dst.s = smin;\n\t\te.Dst.t = t;\n\t\ttess.event = e.Dst;\t\t/* initialize it */\n\n\t\treg.eUp = e;\n\t\treg.windingNumber = 0;\n\t\treg.inside = false;\n\t\treg.fixUpperEdge = false;\n\t\treg.sentinel = true;\n\t\treg.dirty = false;\n\t\treg.nodeUp = tess.dict.insert( reg );\n\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\n\t}\n\n\n\t//static void InitEdgeDict( TESStesselator *tess )\n\tSweep.initEdgeDict = function( tess ) {\n\t\t/*\n\t\t* We maintain an ordering of edge intersections with the sweep line.\n\t\t* This order is maintained in a dynamic dictionary.\n\t\t*/\n\t\ttess.dict = new Dict( tess, Sweep.edgeLeq );\n\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\n\n\t\tvar w = (tess.bmax[0] - tess.bmin[0]);\n\t\tvar h = (tess.bmax[1] - tess.bmin[1]);\n\n\t\tvar smin = tess.bmin[0] - w;\n\t\tvar smax = tess.bmax[0] + w;\n\t\tvar tmin = tess.bmin[1] - h;\n\t\tvar tmax = tess.bmax[1] + h;\n\n\t\tSweep.addSentinel( tess, smin, smax, tmin );\n\t\tSweep.addSentinel( tess, smin, smax, tmax );\n\t}\n\n\n\tSweep.doneEdgeDict = function( tess )\n\t{\n\t\tvar reg;\n\t\tvar fixedEdges = 0;\n\n\t\twhile( (reg = tess.dict.min().key) !== null ) {\n\t\t\t/*\n\t\t\t* At the end of all processing, the dictionary should contain\n\t\t\t* only the two sentinel edges, plus at most one \"fixable\" edge\n\t\t\t* created by ConnectRightVertex().\n\t\t\t*/\n\t\t\tif( ! reg.sentinel ) {\n\t\t\t\tassert( reg.fixUpperEdge );\n\t\t\t\tassert( ++fixedEdges == 1 );\n\t\t\t}\n\t\t\tassert( reg.windingNumber == 0 );\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\t/*    tessMeshDelete( reg->eUp );*/\n\t\t}\n\t//\tdictDeleteDict( &tess->alloc, tess->dict );\n\t}\n\n\n\tSweep.removeDegenerateEdges = function( tess ) {\n\t\t/*\n\t\t* Remove zero-length edges, and contours with fewer than 3 vertices.\n\t\t*/\n\t\tvar e, eNext, eLnext;\n\t\tvar eHead = tess.mesh.eHead;\n\n\t\t/*LINTED*/\n\t\tfor( e = eHead.next; e !== eHead; e = eNext ) {\n\t\t\teNext = e.next;\n\t\t\teLnext = e.Lnext;\n\n\t\t\tif( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {\n\t\t\t\t/* Zero-length edge, contour has at least 3 edges */\n\t\t\t\tSweep.spliceMergeVertices( tess, eLnext, e );\t/* deletes e->Org */\n\t\t\t\ttess.mesh.delete( e ); /* e is a self-loop */\n\t\t\t\te = eLnext;\n\t\t\t\teLnext = e.Lnext;\n\t\t\t}\n\t\t\tif( eLnext.Lnext === e ) {\n\t\t\t\t/* Degenerate contour (one or two edges) */\n\t\t\t\tif( eLnext !== e ) {\n\t\t\t\t\tif( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\t\ttess.mesh.delete( eLnext );\n\t\t\t\t}\n\t\t\t\tif( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t}\n\n\tSweep.initPriorityQ = function( tess ) {\n\t\t/*\n\t\t* Insert all vertices into the priority queue which determines the\n\t\t* order in which vertices cross the sweep line.\n\t\t*/\n\t\tvar pq;\n\t\tvar v, vHead;\n\t\tvar vertexCount = 0;\n\t\t\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tvertexCount++;\n\t\t}\n\t\t/* Make sure there is enough space for sentinels. */\n\t\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\n\t\t\n\t\tpq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );\n\t//\tif (pq == NULL) return 0;\n\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tv.pqHandle = pq.insert( v );\n\t//\t\tif (v.pqHandle == INV_HANDLE)\n\t//\t\t\tbreak;\n\t\t}\n\n\t\tif (v !== vHead) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpq.init();\n\n\t\treturn true;\n\t}\n\n\n\tSweep.donePriorityQ = function( tess ) {\n\t\ttess.pq = null;\n\t}\n\n\n\tSweep.removeDegenerateFaces = function( tess, mesh ) {\n\t\t/*\n\t\t* Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n\t\t* will catch almost all of these, but it won't catch degenerate faces\n\t\t* produced by splice operations on already-processed edges.\n\t\t* The two places this can happen are in FinishLeftRegions(), when\n\t\t* we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n\t\t* and in CheckForLeftSplice(), where we splice already-processed\n\t\t* edges to ensure that our dictionary invariants are not violated\n\t\t* by numerical errors.\n\t\t*\n\t\t* In both these cases it is *very* dangerous to delete the offending\n\t\t* edge at the time, since one of the routines further up the stack\n\t\t* will sometimes be keeping a pointer to that edge.\n\t\t*/\n\t\tvar f, fNext;\n\t\tvar e;\n\n\t\t/*LINTED*/\n\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {\n\t\t\tfNext = f.next;\n\t\t\te = f.anEdge;\n\t\t\tassert( e.Lnext !== e );\n\n\t\t\tif( e.Lnext.Lnext === e ) {\n\t\t\t\t/* A face with only two edges */\n\t\t\t\tSweep.addWinding( e.Onext, e );\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tSweep.computeInterior = function( tess ) {\n\t\t/*\n\t\t* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t* by the given contours, and further subdivides this arrangement\n\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t* Each interior region is guaranteed be monotone.\n\t\t*/\n\t\tvar v, vNext;\n\n\t\t/* Each vertex defines an event for our sweep line.  Start by inserting\n\t\t* all the vertices in a priority queue.  Events are processed in\n\t\t* lexicographic order, ie.\n\t\t*\n\t\t*\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n\t\t*/\n\t\tSweep.removeDegenerateEdges( tess );\n\t\tif ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */\n\t\tSweep.initEdgeDict( tess );\n\n\t\twhile( (v = tess.pq.extractMin()) !== null ) {\n\t\t\tfor( ;; ) {\n\t\t\t\tvNext = tess.pq.min();\n\t\t\t\tif( vNext === null || ! Geom.vertEq( vNext, v )) break;\n\n\t\t\t\t/* Merge together all vertices at exactly the same location.\n\t\t\t\t* This is more efficient than processing them one at a time,\n\t\t\t\t* simplifies the code (see ConnectLeftDegenerate), and is also\n\t\t\t\t* important for correct handling of certain degenerate cases.\n\t\t\t\t* For example, suppose there are two identical edges A and B\n\t\t\t\t* that belong to different contours (so without this code they would\n\t\t\t\t* be processed by separate sweep events).  Suppose another edge C\n\t\t\t\t* crosses A and B from above.  When A is processed, we split it\n\t\t\t\t* at its intersection point with C.  However this also splits C,\n\t\t\t\t* so when we insert B we may compute a slightly different\n\t\t\t\t* intersection point.  This might leave two edges with a small\n\t\t\t\t* gap between them.  This kind of error is especially obvious\n\t\t\t\t* when using boundary extraction (TESS_BOUNDARY_ONLY).\n\t\t\t\t*/\n\t\t\t\tvNext = tess.pq.extractMin();\n\t\t\t\tSweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, v );\n\t\t}\n\n\t\t/* Set tess->event for debugging purposes */\n\t\ttess.event = tess.dict.min().key.eUp.Org;\n\t\tSweep.debugEvent( tess );\n\t\tSweep.doneEdgeDict( tess );\n\t\tSweep.donePriorityQ( tess );\n\n\t\tif ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;\n\t\ttess.mesh.check();\n\n\t\treturn true;\n\t}\n\n\n\tfunction Tesselator() {\n\n\t\t/*** state needed for collecting the input data ***/\n\t\tthis.mesh = null;\t\t/* stores the input contours, and eventually\n\t\t\t\t\t\t\tthe tessellation itself */\n\n\t\t/*** state needed for projecting onto the sweep plane ***/\n\n\t\tthis.normal = [0.0, 0.0, 0.0];\t/* user-specified normal (if provided) */\n\t\tthis.sUnit = [0.0, 0.0, 0.0];\t/* unit vector in s-direction (debugging) */\n\t\tthis.tUnit = [0.0, 0.0, 0.0];\t/* unit vector in t-direction (debugging) */\n\n\t\tthis.bmin = [0.0, 0.0];\n\t\tthis.bmax = [0.0, 0.0];\n\n\t\t/*** state needed for the line sweep ***/\n\t\tthis.windingRule = Tess2.WINDING_ODD;\t/* rule for determining polygon interior */\n\n\t\tthis.dict = null;\t\t/* edge dictionary for sweep line */\n\t\tthis.pq = null;\t\t/* priority queue of vertex events */\n\t\tthis.event = null;\t\t/* current sweep event being processed */\n\n\t\tthis.vertexIndexCounter = 0;\n\t\t\n\t\tthis.vertices = [];\n\t\tthis.vertexIndices = [];\n\t\tthis.vertexCount = 0;\n\t\tthis.elements = [];\n\t\tthis.elementCount = 0;\n\t};\n\n\tTesselator.prototype = {\n\n\t\tdot_: function(u, v) {\n\t\t\treturn (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);\n\t\t},\n\n\t\tnormalize_: function( v ) {\n\t\t\tvar len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n\t\t\tassert( len > 0.0 );\n\t\t\tlen = Math.sqrt( len );\n\t\t\tv[0] /= len;\n\t\t\tv[1] /= len;\n\t\t\tv[2] /= len;\n\t\t},\n\n\t\tlongAxis_: function( v ) {\n\t\t\tvar i = 0;\n\t\t\tif( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }\n\t\t\tif( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }\n\t\t\treturn i;\n\t\t},\n\n\t\tcomputeNormal_: function( norm )\n\t\t{\n\t\t\tvar v, v1, v2;\n\t\t\tvar c, tLen2, maxLen2;\n\t\t\tvar maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];\n\t\t\tvar maxVert = [null,null,null], minVert = [null,null,null];\n\t\t\tvar vHead = this.mesh.vHead;\n\t\t\tvar i;\n\n\t\t\tv = vHead.next;\n\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\tc = v.coords[i];\n\t\t\t\tminVal[i] = c;\n\t\t\t\tminVert[i] = v;\n\t\t\t\tmaxVal[i] = c;\n\t\t\t\tmaxVert[i] = v;\n\t\t\t}\n\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\t\tc = v.coords[i];\n\t\t\t\t\tif( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }\n\t\t\t\t\tif( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\n\t\t\t* distance between any two vertices\n\t\t\t*/\n\t\t\ti = 0;\n\t\t\tif( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }\n\t\t\tif( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }\n\t\t\tif( minVal[i] >= maxVal[i] ) {\n\t\t\t\t/* All vertices are the same -- normal doesn't matter */\n\t\t\t\tnorm[0] = 0; norm[1] = 0; norm[2] = 1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Look for a third vertex which forms the triangle with maximum area\n\t\t\t* (Length of normal == twice the triangle area)\n\t\t\t*/\n\t\t\tmaxLen2 = 0;\n\t\t\tv1 = minVert[i];\n\t\t\tv2 = maxVert[i];\n\t\t\td1[0] = v1.coords[0] - v2.coords[0];\n\t\t\td1[1] = v1.coords[1] - v2.coords[1];\n\t\t\td1[2] = v1.coords[2] - v2.coords[2];\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\td2[0] = v.coords[0] - v2.coords[0];\n\t\t\t\td2[1] = v.coords[1] - v2.coords[1];\n\t\t\t\td2[2] = v.coords[2] - v2.coords[2];\n\t\t\t\ttNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];\n\t\t\t\ttNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];\n\t\t\t\ttNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];\n\t\t\t\ttLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];\n\t\t\t\tif( tLen2 > maxLen2 ) {\n\t\t\t\t\tmaxLen2 = tLen2;\n\t\t\t\t\tnorm[0] = tNorm[0];\n\t\t\t\t\tnorm[1] = tNorm[1];\n\t\t\t\t\tnorm[2] = tNorm[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( maxLen2 <= 0 ) {\n\t\t\t\t/* All points lie on a single line -- any decent normal will do */\n\t\t\t\tnorm[0] = norm[1] = norm[2] = 0;\n\t\t\t\tnorm[this.longAxis_(d1)] = 1;\n\t\t\t}\n\t\t},\n\n\t\tcheckOrientation_: function() {\n\t\t\tvar area;\n\t\t\tvar f, fHead = this.mesh.fHead;\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar e;\n\n\t\t\t/* When we compute the normal automatically, we choose the orientation\n\t\t\t* so that the the sum of the signed areas of all contours is non-negative.\n\t\t\t*/\n\t\t\tarea = 0;\n\t\t\tfor( f = fHead.next; f !== fHead; f = f.next ) {\n\t\t\t\te = f.anEdge;\n\t\t\t\tif( e.winding <= 0 ) continue;\n\t\t\t\tdo {\n\t\t\t\t\tarea += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tif( area < 0 ) {\n\t\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\n\t\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\t\tv.t = - v.t;\n\t\t\t\t}\n\t\t\t\tthis.tUnit[0] = - this.tUnit[0];\n\t\t\t\tthis.tUnit[1] = - this.tUnit[1];\n\t\t\t\tthis.tUnit[2] = - this.tUnit[2];\n\t\t\t}\n\t\t},\n\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\n\t\t#include <stdlib.h>\n\t\textern int RandomSweep;\n\t\t#define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\n\t\t#define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\n\t\t#else\n\t\t#if defined(SLANTED_SWEEP) */\n\t\t/* The \"feature merging\" is not intended to be complete.  There are\n\t\t* special cases where edges are nearly parallel to the sweep line\n\t\t* which are not implemented.  The algorithm should still behave\n\t\t* robustly (ie. produce a reasonable tesselation) in the presence\n\t\t* of such edges, however it may miss features which could have been\n\t\t* merged.  We could minimize this effect by choosing the sweep line\n\t\t* direction to be something unusual (ie. not parallel to one of the\n\t\t* coordinate axes).\n\t\t*/\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\n\t\t#define S_UNIT_Y\t(TESSreal)0.86052074622010633\n\t\t#else\n\t\t#define S_UNIT_X\t(TESSreal)1.0\n\t\t#define S_UNIT_Y\t(TESSreal)0.0\n\t\t#endif\n\t\t#endif*/\n\n\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t* of the polygon.\n\t\t*/\n\t\tprojectPolygon_: function() {\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar norm = [0,0,0];\n\t\t\tvar sUnit, tUnit;\n\t\t\tvar i, first, computedNormal = false;\n\n\t\t\tnorm[0] = this.normal[0];\n\t\t\tnorm[1] = this.normal[1];\n\t\t\tnorm[2] = this.normal[2];\n\t\t\tif( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {\n\t\t\t\tthis.computeNormal_( norm );\n\t\t\t\tcomputedNormal = true;\n\t\t\t}\n\t\t\tsUnit = this.sUnit;\n\t\t\ttUnit = this.tUnit;\n\t\t\ti = this.longAxis_( norm );\n\n\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\n\t\t\t// Choose the initial sUnit vector to be approximately perpendicular\n\t\t\t// to the normal.\n\t\t\t\n\t\t\tNormalize( norm );\n\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = S_UNIT_X;\n\t\t\tsUnit[(i+2)%3] = S_UNIT_Y;\n\n\t\t\t// Now make it exactly perpendicular \n\t\t\tw = Dot( sUnit, norm );\n\t\t\tsUnit[0] -= w * norm[0];\n\t\t\tsUnit[1] -= w * norm[1];\n\t\t\tsUnit[2] -= w * norm[2];\n\t\t\tNormalize( sUnit );\n\n\t\t\t// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame \n\t\t\ttUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\n\t\t\ttUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\n\t\t\ttUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\n\t\t\tNormalize( tUnit );\n\t\t#else*/\n\t\t\t/* Project perpendicular to a coordinate axis -- better numerically */\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = 1.0;\n\t\t\tsUnit[(i+2)%3] = 0.0;\n\n\t\t\ttUnit[i] = 0;\n\t\t\ttUnit[(i+1)%3] = 0.0;\n\t\t\ttUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;\n\t//\t#endif\n\n\t\t\t/* Project the vertices onto the sweep plane */\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tv.s = this.dot_( v.coords, sUnit );\n\t\t\t\tv.t = this.dot_( v.coords, tUnit );\n\t\t\t}\n\t\t\tif( computedNormal ) {\n\t\t\t\tthis.checkOrientation_();\n\t\t\t}\n\n\t\t\t/* Compute ST bounds. */\n\t\t\tfirst = true;\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tif (first) {\n\t\t\t\t\tthis.bmin[0] = this.bmax[0] = v.s;\n\t\t\t\t\tthis.bmin[1] = this.bmax[1] = v.t;\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (v.s < this.bmin[0]) this.bmin[0] = v.s;\n\t\t\t\t\tif (v.s > this.bmax[0]) this.bmax[0] = v.s;\n\t\t\t\t\tif (v.t < this.bmin[1]) this.bmin[1] = v.t;\n\t\t\t\t\tif (v.t > this.bmax[1]) this.bmax[1] = v.t;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddWinding_: function(eDst,eSrc) {\n\t\t\teDst.winding += eSrc.winding;\n\t\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t\t},\n\t\t\n\t\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\n\t\t* (what else would it do??)  The region must consist of a single\n\t\t* loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n\t\t* case means that any vertical line intersects the interior of the\n\t\t* region in a single interval.  \n\t\t*\n\t\t* Tessellation consists of adding interior edges (actually pairs of\n\t\t* half-edges), to split the region into non-overlapping triangles.\n\t\t*\n\t\t* The basic idea is explained in Preparata and Shamos (which I don''t\n\t\t* have handy right now), although their implementation is more\n\t\t* complicated than this one.  The are two edge chains, an upper chain\n\t\t* and a lower chain.  We process all vertices from both chains in order,\n\t\t* from right to left.\n\t\t*\n\t\t* The algorithm ensures that the following invariant holds after each\n\t\t* vertex is processed: the untessellated region consists of two\n\t\t* chains, where one chain (say the upper) is a single edge, and\n\t\t* the other chain is concave.  The left vertex of the single edge\n\t\t* is always to the left of all vertices in the concave chain.\n\t\t*\n\t\t* Each step consists of adding the rightmost unprocessed vertex to one\n\t\t* of the two chains, and forming a fan of triangles from the rightmost\n\t\t* of two chain endpoints.  Determining whether we can add each triangle\n\t\t* to the fan is a simple orientation test.  By making the fan as large\n\t\t* as possible, we restore the invariant (check it yourself).\n\t\t*/\n\t//\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\n\t\ttessellateMonoRegion_: function( mesh, face ) {\n\t\t\tvar up, lo;\n\n\t\t\t/* All edges are oriented CCW around the boundary of the region.\n\t\t\t* First, find the half-edge whose origin vertex is rightmost.\n\t\t\t* Since the sweep goes from left to right, face->anEdge should\n\t\t\t* be close to the edge we want.\n\t\t\t*/\n\t\t\tup = face.anEdge;\n\t\t\tassert( up.Lnext !== up && up.Lnext.Lnext !== up );\n\n\t\t\tfor( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )\n\t\t\t\t;\n\t\t\tfor( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )\n\t\t\t\t;\n\t\t\tlo = up.Lprev;\n\n\t\t\twhile( up.Lnext !== lo ) {\n\t\t\t\tif( Geom.vertLeq( up.Dst, lo.Org )) {\n\t\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\n\t\t\t\t\t* The EdgeGoesLeft test guarantees progress even when some triangles\n\t\t\t\t\t* are CW, given that the upper and lower chains are truly monotone.\n\t\t\t\t\t*/\n\t\t\t\t\twhile( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )\n\t\t\t\t\t\t|| Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tlo = lo.Lprev;\n\t\t\t\t} else {\n\t\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\n\t\t\t\t\twhile( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )\n\t\t\t\t\t\t|| Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( up, up.Lprev );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tup = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tup = up.Lnext;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\n\t\t\t* can be tessellated in a fan from this leftmost vertex.\n\t\t\t*/\n\t\t\tassert( lo.Lnext !== up );\n\t\t\twhile( lo.Lnext.Lnext !== up ) {\n\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\n\t\t* the mesh which is marked \"inside\" the polygon.  Each such region\n\t\t* must be monotone.\n\t\t*/\n\t\t//int tessMeshTessellateInterior( TESSmesh *mesh )\n\t\ttessellateInterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( f.inside ) {\n\t\t\t\t\tif ( !this.tessellateMonoRegion_( mesh, f ) ) return false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n\t\t* which are not marked \"inside\" the polygon.  Since further mesh operations\n\t\t* on NULL faces are not allowed, the main purpose is to clean up the\n\t\t* mesh so that exterior loops are not represented in the data structure.\n\t\t*/\n\t\t//void tessMeshDiscardExterior( TESSmesh *mesh )\n\t\tdiscardExterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Since f will be destroyed, save its next pointer. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( ! f.inside ) {\n\t\t\t\t\tmesh.zapFace( f );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n\t\t* winding numbers on all edges so that regions marked \"inside\" the\n\t\t* polygon have a winding number of \"value\", and regions outside\n\t\t* have a winding number of 0.\n\t\t*\n\t\t* If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n\t\t* separate an interior region from an exterior one.\n\t\t*/\n\t//\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\n\t\tsetWindingNumber_: function( mesh, value, keepOnlyBoundary ) {\n\t\t\tvar e, eNext;\n\n\t\t\tfor( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {\n\t\t\t\teNext = e.next;\n\t\t\t\tif( e.Rface.inside !== e.Lface.inside ) {\n\n\t\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\n\t\t\t\t\te.winding = (e.Lface.inside) ? value : -value;\n\t\t\t\t} else {\n\n\t\t\t\t\t/* Both regions are interior, or both are exterior. */\n\t\t\t\t\tif( ! keepOnlyBoundary ) {\n\t\t\t\t\t\te.winding = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmesh.delete( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetNeighbourFace_: function(edge)\n\t\t{\n\t\t\tif (!edge.Rface)\n\t\t\t\treturn -1;\n\t\t\tif (!edge.Rface.inside)\n\t\t\t\treturn -1;\n\t\t\treturn edge.Rface.n;\n\t\t},\n\n\t\toutputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {\n\t\t\tvar v;\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar maxFaceCount = 0;\n\t\t\tvar maxVertexCount = 0;\n\t\t\tvar faceVerts, i;\n\t\t\tvar elements = 0;\n\t\t\tvar vert;\n\n\t\t\t// Assume that the input data is triangles now.\n\t\t\t// Try to merge as many polygons as possible\n\t\t\tif (polySize > 3)\n\t\t\t{\n\t\t\t\tmesh.mergeConvexFaces( polySize );\n\t\t\t}\n\n\t\t\t// Mark unused\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t\tv.n = -1;\n\n\t\t\t// Create unique IDs for all vertices and faces.\n\t\t\tfor ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tf.n = -1;\n\t\t\t\tif( !f.inside ) continue;\n\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tif ( v.n === -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tv.n = maxVertexCount;\n\t\t\t\t\t\tmaxVertexCount++;\n\t\t\t\t\t}\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\n\t\t\t\tassert( faceVerts <= polySize );\n\n\t\t\t\tf.n = maxFaceCount;\n\t\t\t\t++maxFaceCount;\n\t\t\t}\n\n\t\t\tthis.elementCount = maxFaceCount;\n\t\t\tif (elementType == Tess2.CONNECTED_POLYGONS)\n\t\t\t\tmaxFaceCount *= 2;\n\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * maxFaceCount * polySize );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = maxFaceCount * polySize;\n\t\t\t\n\t\t\tthis.vertexCount = maxVertexCount;\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = maxVertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = maxVertexCount;\n\n\t\t\t\n\t\t\t// Output vertices.\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t{\n\t\t\t\tif ( v.n != -1 )\n\t\t\t\t{\n\t\t\t\t\t// Store coordinate\n\t\t\t\t\tvar idx = v.n * vertexSize;\n\t\t\t\t\tthis.vertices[idx+0] = v.coords[0];\n\t\t\t\t\tthis.vertices[idx+1] = v.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[idx+2] = v.coords[2];\n\t\t\t\t\t// Store vertex index.\n\t\t\t\t\tthis.vertexIndices[v.n] = v.idx;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Output indices.\n\t\t\tvar nel = 0;\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\t\t\t\t\n\t\t\t\t// Store polygon\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tthis.elements[nel++] = v.n;\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t// Fill unused.\n\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\tthis.elements[nel++] = -1;\n\n\t\t\t\t// Store polygon connectivity\n\t\t\t\tif ( elementType == Tess2.CONNECTED_POLYGONS )\n\t\t\t\t{\n\t\t\t\t\tedge = f.anEdge;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.elements[nel++] = this.getNeighbourFace_( edge );\n\t\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t\t}\n\t\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\t// Fill unused.\n\t\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\t\tthis.elements[nel++] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t//\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\n\t\toutputContours_: function( mesh, vertexSize ) {\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar start;\n\t\t\tvar verts;\n\t\t\tvar elements;\n\t\t\tvar vertInds;\n\t\t\tvar startVert = 0;\n\t\t\tvar vertCount = 0;\n\n\t\t\tthis.vertexCount = 0;\n\t\t\tthis.elementCount = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertexCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elementCount++;\n\t\t\t}\n\n\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * tess->elementCount * 2 );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = this.elementCount * 2;\n\t\t\t\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = this.vertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = this.vertexCount;\n\n\t\t\tvar nv = 0;\n\t\t\tvar nvi = 0;\n\t\t\tvar nel = 0;\n\t\t\tstartVert = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tvertCount = 0;\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[0];\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[2];\n\t\t\t\t\tthis.vertexIndices[nvi++] = edge.Org.idx;\n\t\t\t\t\tvertCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elements[nel++] = startVert;\n\t\t\t\tthis.elements[nel++] = vertCount;\n\n\t\t\t\tstartVert += vertCount;\n\t\t\t}\n\t\t},\n\n\t\taddContour: function( size, vertices )\n\t\t{\n\t\t\tvar e;\n\t\t\tvar i;\n\n\t\t\tif ( this.mesh === null )\n\t\t\t  \tthis.mesh = new TESSmesh();\n\t/*\t \tif ( tess->mesh == NULL ) {\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\n\t\t\tif ( size < 2 )\n\t\t\t\tsize = 2;\n\t\t\tif ( size > 3 )\n\t\t\t\tsize = 3;\n\n\t\t\te = null;\n\n\t\t\tfor( i = 0; i < vertices.length; i += size )\n\t\t\t{\n\t\t\t\tif( e == null ) {\n\t\t\t\t\t/* Make a self-loop (one vertex, one edge). */\n\t\t\t\t\te = this.mesh.makeEdge();\n\t/*\t\t\t\tif ( e == NULL ) {\n\t\t\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}*/\n\t\t\t\t\tthis.mesh.splice( e, e.Sym );\n\t\t\t\t} else {\n\t\t\t\t\t/* Create a new vertex and edge which immediately follow e\n\t\t\t\t\t* in the ordering around the left face.\n\t\t\t\t\t*/\n\t\t\t\t\tthis.mesh.splitEdge( e );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t}\n\n\t\t\t\t/* The new vertex is now e->Org. */\n\t\t\t\te.Org.coords[0] = vertices[i+0];\n\t\t\t\te.Org.coords[1] = vertices[i+1];\n\t\t\t\tif ( size > 2 )\n\t\t\t\t\te.Org.coords[2] = vertices[i+2];\n\t\t\t\telse\n\t\t\t\t\te.Org.coords[2] = 0.0;\n\t\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\n\t\t\t\te.Org.idx = this.vertexIndexCounter++;\n\n\t\t\t\t/* The winding of an edge says how the winding number changes as we\n\t\t\t\t* cross from the edge''s right face to its left face.  We add the\n\t\t\t\t* vertices in such an order that a CCW contour will add +1 to\n\t\t\t\t* the winding number of the region inside the contour.\n\t\t\t\t*/\n\t\t\t\te.winding = 1;\n\t\t\t\te.Sym.winding = -1;\n\t\t\t}\n\t\t},\n\n\t//\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\n\t\ttesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {\n\t\t\tthis.vertices = [];\n\t\t\tthis.elements = [];\n\t\t\tthis.vertexIndices = [];\n\n\t\t\tthis.vertexIndexCounter = 0;\n\t\t\t\n\t\t\tif (normal)\n\t\t\t{\n\t\t\t\tthis.normal[0] = normal[0];\n\t\t\t\tthis.normal[1] = normal[1];\n\t\t\t\tthis.normal[2] = normal[2];\n\t\t\t}\n\n\t\t\tthis.windingRule = windingRule;\n\n\t\t\tif (vertexSize < 2)\n\t\t\t\tvertexSize = 2;\n\t\t\tif (vertexSize > 3)\n\t\t\t\tvertexSize = 3;\n\n\t/*\t\tif (setjmp(tess->env) != 0) { \n\t\t\t\t// come back here if out of memory\n\t\t\t\treturn 0;\n\t\t\t}*/\n\n\t\t\tif (!this.mesh)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t\t* of the polygon.\n\t\t\t*/\n\t\t\tthis.projectPolygon_();\n\n\t\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t\t* by the given contours, and further subdivides this arrangement\n\t\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t\t* Each interior region is guaranteed be monotone.\n\t\t\t*/\n\t\t\tSweep.computeInterior( this );\n\n\t\t\tvar mesh = this.mesh;\n\n\t\t\t/* If the user wants only the boundary contours, we throw away all edges\n\t\t\t* except those which separate the interior from the exterior.\n\t\t\t* Otherwise we tessellate all the regions marked \"inside\".\n\t\t\t*/\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.setWindingNumber_( mesh, 1, true );\n\t\t\t} else {\n\t\t\t\tthis.tessellateInterior_( mesh ); \n\t\t\t}\n\t//\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\n\n\t\t\tmesh.check();\n\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.outputContours_( mesh, vertexSize );     /* output contours */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */\n\t\t\t}\n\n//\t\t\ttess.mesh = null;\n\n\t\t\treturn true;\n\t\t}\n\t};\n\n//# sourceURL=webpack:///./node_modules/tess2/src/tess2.js?");

/***/ }),

/***/ "./node_modules/vue-style-loader/index.js?!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-style-loader??ref--8-oneOf-1-0!./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--8-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist??ref--0-1!./MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true */ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../../node_modules/vue-style-loader/lib/addStylesClient.js */ \"./node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"74f4d9be\", content, false, {\"sourceMap\":false,\"shadowMode\":false});\n// Hot Module Replacement\nif(false) {}\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?./node_modules/vue-style-loader??ref--8-oneOf-1-0!./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1");

/***/ }),

/***/ "./src/utils/Vector2D.ts":
/*!*******************************!*\
  !*** ./src/utils/Vector2D.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Vector2D; });\n/* harmony import */ var core_js_modules_es_math_hypot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.math.hypot */ \"./node_modules/core-js/modules/es.math.hypot.js\");\n/* harmony import */ var core_js_modules_es_math_hypot__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_math_hypot__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ \"./node_modules/@babel/runtime/helpers/esm/createSuper.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper */ \"./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\");\n\n\n\n\n\n\n\n\nvar Vector2D = /*#__PURE__*/function (_Array) {\n  Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Vector2D, _Array);\n\n  var _super = Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Vector2D);\n\n  function Vector2D() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Vector2D);\n\n    return _super.call(this, x, y);\n  }\n\n  Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Vector2D, [{\n    key: \"copy\",\n    value: function copy() {\n      return new Vector2D(this.x, this.y);\n    }\n  }, {\n    key: \"add\",\n    value: function add(v) {\n      this.x += v.x;\n      this.y += v.y;\n      return this;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      this.x *= a;\n      this.y *= a;\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(rad) {\n      var c = Math.cos(rad),\n          s = Math.sin(rad);\n\n      var _this = Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, 2),\n          x = _this[0],\n          y = _this[1];\n\n      this.x = x * c + y * -s;\n      this.y = x * s + y * c;\n      return this;\n    } // 向量的叉乘\n\n  }, {\n    key: \"cross\",\n    value: function cross(v) {\n      return this.x * v.y - v.x * this.y;\n    } // 向量的点乘\n\n  }, {\n    key: \"dot\",\n    value: function dot(v) {\n      return this.x * v.x + v.y * this.y;\n    } // 归一化，转化为长度为以的向量\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this.scale(1 / this.len);\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(v) {\n      this[0] = v;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(v) {\n      this[1] = v;\n    }\n  }, {\n    key: \"len\",\n    get: function get() {\n      return Math.hypot(this.x, this.y);\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return Math.atan2(this.y, this.x);\n    }\n  }]);\n\n  return Vector2D;\n}( /*#__PURE__*/Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Array));\n\n\n\n//# sourceURL=webpack:///./src/utils/Vector2D.ts?");

/***/ }),

/***/ "./src/views/math/multiPolygon/MultiPolygon.vue":
/*!******************************************************!*\
  !*** ./src/views/math/multiPolygon/MultiPolygon.vue ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MultiPolygon_vue_vue_type_template_id_db3e987c_scoped_true_bindings___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={} */ \"./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={}\");\n/* harmony import */ var _MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MultiPolygon.vue?vue&type=script&lang=ts */ \"./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true */ \"./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true\");\n\n\n\n\n\n_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render = _MultiPolygon_vue_vue_type_template_id_db3e987c_scoped_true_bindings___WEBPACK_IMPORTED_MODULE_0__[\"render\"]\n_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__scopeId = \"data-v-db3e987c\"\n/* hot reload */\nif (false) {}\n\n_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_1__[\"default\"].__file = \"src/views/math/multiPolygon/MultiPolygon.vue\"\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?");

/***/ }),

/***/ "./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts":
/*!******************************************************************************!*\
  !*** ./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_ref_14_0_node_modules_babel_loader_lib_index_js_node_modules_ts_loader_index_js_ref_14_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../node_modules/babel-loader/lib!../../../../node_modules/ts-loader??ref--14-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist??ref--0-1!./MultiPolygon.vue?vue&type=script&lang=ts */ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/ts-loader/index.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=script&lang=ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _node_modules_cache_loader_dist_cjs_js_ref_14_0_node_modules_babel_loader_lib_index_js_node_modules_ts_loader_index_js_ref_14_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_script_lang_ts__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* empty/unused harmony star reexport */ \n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?");

/***/ }),

/***/ "./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true":
/*!***************************************************************************************************************!*\
  !*** ./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-style-loader??ref--8-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--8-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist??ref--0-1!./MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true */ \"./node_modules/vue-style-loader/index.js?!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=style&index=0&id=db3e987c&lang=scss&scoped=true\");\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_style_index_0_id_db3e987c_lang_scss_scoped_true__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?");

/***/ }),

/***/ "./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={}":
/*!************************************************************************************************************!*\
  !*** ./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={} ***!
  \************************************************************************************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_ref_12_0_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_v16_dist_templateLoader_js_ref_6_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_template_id_db3e987c_scoped_true_bindings___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/babel-loader/lib!../../../../node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist??ref--0-1!./MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={} */ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader-v16/dist/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader-v16/dist/index.js?!./src/views/math/multiPolygon/MultiPolygon.vue?vue&type=template&id=db3e987c&scoped=true&bindings={}\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_cache_loader_dist_cjs_js_ref_12_0_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_v16_dist_templateLoader_js_ref_6_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_MultiPolygon_vue_vue_type_template_id_db3e987c_scoped_true_bindings___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/MultiPolygon.vue?");

/***/ }),

/***/ "./src/views/math/multiPolygon/lib/Canvas2D.ts":
/*!*****************************************************!*\
  !*** ./src/views/math/multiPolygon/lib/Canvas2D.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Canvas2d; });\n/* harmony import */ var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.fill */ \"./node_modules/core-js/modules/es.array.fill.js\");\n/* harmony import */ var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\n\n\nvar Canvas2d = /*#__PURE__*/function () {\n  function Canvas2d(canvas) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$drawCross = _ref.drawCross,\n        drawCross = _ref$drawCross === void 0 ? true : _ref$drawCross,\n        _ref$strokeStyle = _ref.strokeStyle,\n        strokeStyle = _ref$strokeStyle === void 0 ? 'black' : _ref$strokeStyle,\n        _ref$fillStyle = _ref.fillStyle,\n        fillStyle = _ref$fillStyle === void 0 ? 'black' : _ref$fillStyle;\n\n    Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Canvas2d);\n\n    this.canvas = canvas;\n    var ctx = this.ctx = canvas.getContext('2d');\n    this.height = canvas.height;\n    this.width = canvas.width;\n    this.isDrawCross = drawCross;\n    this.strokeStyle = strokeStyle;\n    this.fillStyle = fillStyle;\n    ctx.fillStyle = fillStyle;\n    ctx.strokeStyle = strokeStyle; // drawCross && this.drawCross()\n\n    this.translate2center();\n    this.clear();\n  } // 'nonzero' | 'evenodd'\n\n\n  Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Canvas2d, [{\n    key: \"drawPolygon\",\n    value: function drawPolygon(points) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$close = _ref2.close,\n          close = _ref2$close === void 0 ? true : _ref2$close,\n          _ref2$filled = _ref2.filled,\n          filled = _ref2$filled === void 0 ? true : _ref2$filled,\n          _ref2$rule = _ref2.rule,\n          rule = _ref2$rule === void 0 ? 'nonzero' : _ref2$rule;\n\n      var ctx = this.ctx;\n      this.clear();\n      var start = points[0];\n      ctx.beginPath();\n      ctx.moveTo(start.x, start.y);\n\n      for (var index = 1; index < points.length; index++) {\n        var point = points[index];\n        ctx.lineTo(point.x, point.y);\n      }\n\n      close && ctx.closePath();\n      filled && ctx.fill(rule);\n      ctx.stroke();\n    } // TODO: 高清屏下清除 样式宽高试试\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var ctx = this.ctx,\n          width = this.width,\n          height = this.height;\n      ctx.clearRect(-width / 2, -height / 2, width, height);\n      this.isDrawCross && this.drawCross();\n    }\n  }, {\n    key: \"translate2center\",\n    value: function translate2center() {\n      var ctx = this.ctx,\n          width = this.width,\n          height = this.height;\n      ctx.translate(width / 2, height / 2);\n      ctx.scale(1, -1);\n    }\n  }, {\n    key: \"drawCross\",\n    value: function drawCross() {\n      var ctx = this.ctx,\n          height = this.height,\n          width = this.width;\n      ctx.beginPath();\n      ctx.setLineDash([5, 3]);\n      ctx.strokeStyle = '#999';\n      ctx.moveTo(-width / 2, 0);\n      ctx.lineTo(width / 2, 0);\n      ctx.stroke();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.moveTo(0, height / 2);\n      ctx.lineTo(0, -height / 2);\n      ctx.stroke();\n      ctx.closePath();\n      this.back2InitStyle();\n    }\n  }, {\n    key: \"back2InitStyle\",\n    value: function back2InitStyle() {\n      var ctx = this.ctx;\n      ctx.fillStyle = this.fillStyle;\n      ctx.strokeStyle = this.strokeStyle;\n      ctx.setLineDash([1, 0]);\n    }\n  }]);\n\n  return Canvas2d;\n}();\n\n\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/lib/Canvas2D.ts?");

/***/ }),

/***/ "./src/views/math/multiPolygon/lib/CanvasGL.ts":
/*!*****************************************************!*\
  !*** ./src/views/math/multiPolygon/lib/CanvasGL.ts ***!
  \*****************************************************/
/*! exports provided: default, hex2RGB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CanvasGL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hex2RGB\", function() { return hex2RGB; });\n/* harmony import */ var core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.flat */ \"./node_modules/core-js/modules/es.array.flat.js\");\n/* harmony import */ var core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_flat__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.for-each */ \"./node_modules/core-js/modules/es.array.for-each.js\");\n/* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n/* harmony import */ var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_unscopables_flat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.unscopables.flat */ \"./node_modules/core-js/modules/es.array.unscopables.flat.js\");\n/* harmony import */ var core_js_modules_es_array_unscopables_flat__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_unscopables_flat__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_number_constructor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.number.constructor */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n/* harmony import */ var core_js_modules_es_number_constructor__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_number_to_fixed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.number.to-fixed */ \"./node_modules/core-js/modules/es.number.to-fixed.js\");\n/* harmony import */ var core_js_modules_es_number_to_fixed__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_to_fixed__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es_typed_array_float32_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.typed-array.float32-array */ \"./node_modules/core-js/modules/es.typed-array.float32-array.js\");\n/* harmony import */ var core_js_modules_es_typed_array_float32_array__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_float32_array__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.typed-array.copy-within */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");\n/* harmony import */ var core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.typed-array.every */ \"./node_modules/core-js/modules/es.typed-array.every.js\");\n/* harmony import */ var core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.typed-array.fill */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");\n/* harmony import */ var core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.typed-array.filter */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");\n/* harmony import */ var core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.typed-array.find */ \"./node_modules/core-js/modules/es.typed-array.find.js\");\n/* harmony import */ var core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.typed-array.find-index */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");\n/* harmony import */ var core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.typed-array.for-each */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");\n/* harmony import */ var core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.typed-array.includes */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");\n/* harmony import */ var core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.typed-array.index-of */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");\n/* harmony import */ var core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.typed-array.iterator */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");\n/* harmony import */ var core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.typed-array.join */ \"./node_modules/core-js/modules/es.typed-array.join.js\");\n/* harmony import */ var core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.typed-array.last-index-of */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");\n/* harmony import */ var core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.typed-array.map */ \"./node_modules/core-js/modules/es.typed-array.map.js\");\n/* harmony import */ var core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.typed-array.reduce */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");\n/* harmony import */ var core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.typed-array.reduce-right */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");\n/* harmony import */ var core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.typed-array.reverse */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");\n/* harmony import */ var core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! core-js/modules/es.typed-array.set */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n/* harmony import */ var core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! core-js/modules/es.typed-array.slice */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");\n/* harmony import */ var core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! core-js/modules/es.typed-array.some */ \"./node_modules/core-js/modules/es.typed-array.some.js\");\n/* harmony import */ var core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! core-js/modules/es.typed-array.sort */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");\n/* harmony import */ var core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_27__);\n/* harmony import */ var core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! core-js/modules/es.typed-array.subarray */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");\n/* harmony import */ var core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_28__);\n/* harmony import */ var core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");\n/* harmony import */ var core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_29__);\n/* harmony import */ var core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! core-js/modules/es.typed-array.to-string */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");\n/* harmony import */ var core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_30__);\n/* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_31__);\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! tess2 */ \"./node_modules/tess2/index.js\");\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(tess2__WEBPACK_IMPORTED_MODULE_35__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // BOUNDARY_CONTOURS: 2\n// CONNECTED_POLYGONS: 1\n// POLYGONS: 0\n// WINDING_ABS_GEQ_TWO: 4\n// WINDING_NEGATIVE: 3\n// WINDING_NONZERO: 1\n// WINDING_ODD: 0\n// WINDING_POSITIVE: 2\n// import { vertices } from '@/views/complexPolygon/cfg'\n\nvar CanvasGL = /*#__PURE__*/function () {\n  function CanvasGL(canvas) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$color = _ref.color,\n        color = _ref$color === void 0 ? '#000000' : _ref$color,\n        _ref$bgColor = _ref.bgColor,\n        bgColor = _ref$bgColor === void 0 ? '#FFFFFF' : _ref$bgColor;\n\n    Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_33__[\"default\"])(this, CanvasGL);\n\n    this.canvas = canvas;\n    this.gl = canvas.getContext('webgl');\n    this.color = hex2RGB(color);\n    this.bgColor = hex2RGB(bgColor);\n    this.program = this.init();\n    this.clear();\n  }\n\n  Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_34__[\"default\"])(CanvasGL, [{\n    key: \"init\",\n    value: function init() {\n      var size = this.canvas.width; // TODO: vec4(position, 1.0, 256.0)\n      //  1. position 是顶点\n      //  2. 1.0 和 256.0 是什么，猜想是把 1 分成多少份，保持跟 canvas 一致\n\n      var vertex = \"\\n      attribute vec2 position;\\n      uniform vec4 u_color;\\n      varying vec4 vColor;\\n      void main() {\\n        gl_PointSize = 1.0;\\n        gl_Position = vec4(position, 1.0, \".concat((size / 2).toFixed(1), \");\\n        vColor = u_color;\\n      }\\n    \"); // gl_FragColor = vec4(${this.color.map(x => x.toFixed(1)).join(',')});\n      // gl_FragColor = vColor\n\n      var fragment = \"\\n      precision mediump float;\\n      varying vec4 vColor;\\n      void main() {\\n        gl_FragColor = vColor;\\n      }\\n    \";\n      var program = this.initShaderProgram(vertex, fragment);\n      this.gl.useProgram(program);\n      return program;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var gl = this.gl,\n          bgColor = this.bgColor;\n\n      var _bgColor = Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_32__[\"default\"])(bgColor, 4),\n          red = _bgColor[0],\n          green = _bgColor[1],\n          blue = _bgColor[2],\n          alpha = _bgColor[3];\n\n      gl.clearColor(red, green, blue, alpha);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.clearDepth(1.0);\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(points) {\n      var _this = this;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$rule = _ref2.rule,\n          rule = _ref2$rule === void 0 ? 'nonzero' : _ref2$rule;\n\n      this.clear();\n      var triangles = this.polygonToTriangles(points, {\n        rule: rule\n      });\n      triangles.forEach(function (el) {\n        return _this.triangle(el);\n      });\n    }\n  }, {\n    key: \"triangle\",\n    value: function triangle(points) {\n      // this.init()\n      var gl = this.gl,\n          program = this.program;\n      this.buffer(points.flat());\n      var vPosition = gl.getAttribLocation(program, 'position'); // 给变量设置长度和类型，每次迭代运行提取 2 个单位数据，每个单位数据类型是 32 位，不需要要归一化数据，强烈建议读下课本\n\n      gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(vPosition); // u_color 是一个 uniform(全局变量) 变量\n\n      var colorLoc = gl.getUniformLocation(program, 'u_color');\n      gl.uniform4fv(colorLoc, this.getRandomColor()); // WebGL 将对应的 buffer 数组传给顶点着色器，开始绘制\n\n      gl.drawArrays(gl.TRIANGLES, 0, points.length);\n    }\n  }, {\n    key: \"buffer\",\n    value: function buffer(data) {\n      var gl = this.gl;\n      var positionBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n    } // doc: https://github.com/memononen/tess2.js\n    // 'nonzero' | 'evenodd'\n\n  }, {\n    key: \"polygonToTriangles\",\n    value: function polygonToTriangles(points) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$rule = _ref3.rule,\n          rule = _ref3$rule === void 0 ? 'nonzero' : _ref3$rule;\n\n      var res = Object(tess2__WEBPACK_IMPORTED_MODULE_35__[\"tesselate\"])({\n        contours: [points.flat()],\n        windingRule: rule === 'nonzero' ? tess2__WEBPACK_IMPORTED_MODULE_35__[\"WINDING_NONZERO\"] : tess2__WEBPACK_IMPORTED_MODULE_35__[\"WINDING_ODD\"],\n        elementType: tess2__WEBPACK_IMPORTED_MODULE_35__[\"POLYGONS\"],\n        polySize: 3,\n        vertexSize: 2,\n        strict: false\n      });\n      var triangles = [];\n\n      for (var i = 0; i < res.elements.length; i += 3) {\n        var a = res.elements[i];\n        var b = res.elements[i + 1];\n        var c = res.elements[i + 2];\n        triangles.push([[res.vertices[a * 2], res.vertices[a * 2 + 1]], [res.vertices[b * 2], res.vertices[b * 2 + 1]], [res.vertices[c * 2], res.vertices[c * 2 + 1]]]);\n      }\n\n      return triangles;\n    }\n  }, {\n    key: \"getRandomColor\",\n    value: function getRandomColor() {\n      return [random(), random(), random(), 1.0];\n    }\n  }, {\n    key: \"initShaderProgram\",\n    value: function initShaderProgram(vertex, fragment) {\n      var gl = this.gl;\n      var vertexShader = this.loadShader(gl.VERTEX_SHADER, vertex);\n      var fragmentShader = this.loadShader(gl.FRAGMENT_SHADER, fragment);\n      var shaderProgram = gl.createProgram();\n      gl.attachShader(shaderProgram, vertexShader);\n      gl.attachShader(shaderProgram, fragmentShader);\n      gl.linkProgram(shaderProgram);\n      return shaderProgram;\n    }\n  }, {\n    key: \"loadShader\",\n    value: function loadShader(type, source) {\n      var gl = this.gl;\n      var shader = gl.createShader(type);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n      return shader;\n    }\n  }]);\n\n  return CanvasGL;\n}();\n\n\nfunction hex2RGB(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var r = parseInt(hex.slice(1, 3), 16);\n  var g = parseInt(hex.slice(3, 5), 16);\n  var b = parseInt(hex.slice(5, 7), 16);\n  return [r, g, b, alpha];\n}\n\nfunction random() {\n  return Number(Math.random().toFixed(1));\n}\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/lib/CanvasGL.ts?");

/***/ }),

/***/ "./src/views/math/multiPolygon/makePolygonData.ts":
/*!********************************************************!*\
  !*** ./src/views/math/multiPolygon/makePolygonData.ts ***!
  \********************************************************/
/*! exports provided: makePolygonData, makeEllipseData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makePolygonData\", function() { return makePolygonData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeEllipseData\", function() { return makeEllipseData; });\n/* harmony import */ var _Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _utils_Vector2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/Vector2D */ \"./src/utils/Vector2D.ts\");\n\n\nfunction makePolygonData(_ref) {\n  var _ref2 = Object(_Users_sunwangxing_demo_canvas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, 2),\n      x = _ref2[0],\n      y = _ref2[1];\n\n  var edges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var start = new _utils_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](x, y);\n  var points = [start]; // 每次旋转外角，即 2π/n\n\n  var degree = 2 * Math.PI / edges;\n\n  for (var i = 1; i <= edges - 1; i++) {\n    points.push(start.copy().rotate(i * degree));\n  }\n\n  return points;\n}\nvar TAU_SEGMENTS = 60;\nvar TAU = Math.PI * 2; // 圆是椭圆的特殊情况，也就是 radiusX === radiusY\n\nfunction makeEllipseData(x0, y0, radiusX, radiusY) {\n  var startAng = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var endAng = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TAU;\n  var ang = Math.min(TAU, endAng - startAng);\n  var ret = ang === TAU ? [] : [new _utils_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](x0, y0)];\n  var segments = Math.round(TAU_SEGMENTS * ang / TAU);\n\n  for (var i = 0; i <= segments; i++) {\n    var x = x0 + radiusX * Math.cos(startAng + ang * i / segments);\n    var y = y0 + radiusY * Math.sin(startAng + ang * i / segments);\n    ret.push(new _utils_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](x, y));\n  }\n\n  return ret;\n}\n\n//# sourceURL=webpack:///./src/views/math/multiPolygon/makePolygonData.ts?");

/***/ })

}]);